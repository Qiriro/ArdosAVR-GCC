
ArdosAVRGCC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000018dc  00001970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017d  0080013a  0080013a  000019aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008f31  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ccd  00000000  00000000  0000adad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bf  00000000  00000000  0000ca7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc8  00000000  00000000  0000e43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000209e  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004580  00000000  00000000  000111a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00015722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_1>
       8:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_7>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_9>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_18>
      4c:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	b7 06       	cpc	r11, r23
      bc:	26 07       	cpc	r18, r22

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ec ed       	ldi	r30, 0xDC	; 220
      d2:	f8 e1       	ldi	r31, 0x18	; 24
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	aa 33       	cpi	r26, 0x3A	; 58
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	22 e0       	ldi	r18, 0x02	; 2
      e2:	aa e3       	ldi	r26, 0x3A	; 58
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a7 3b       	cpi	r26, 0xB7	; 183
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 16 0b 	call	0x162c	; 0x162c <__tablejump2__>
     100:	cd 35       	cpi	r28, 0x5D	; 93
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 32 07 	call	0xe64	; 0xe64 <main>
     10a:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z7_OSIdlePv>:
	initQ(_readybuf, _maxTasks, &_ready);
	
}

// The idle task. Just wastes CPU cycles
void _OSIdle(void *p)
     112:	ff cf       	rjmp	.-2      	; 0x112 <_Z7_OSIdlePv>

00000114 <_Z10OSSetErrorj>:
	return _errno;
}

void OSSetError(unsigned int errno)
{
	_errno=errno;
     114:	90 93 5f 01 	sts	0x015F, r25
     118:	80 93 5e 01 	sts	0x015E, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11c:	26 e0       	ldi	r18, 0x06	; 6
     11e:	40 e0       	ldi	r20, 0x00	; 0
     120:	52 ec       	ldi	r21, 0xC2	; 194
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	8a ee       	ldi	r24, 0xEA	; 234
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN14HardwareSerial5beginEmh>
	Serial.begin(115200);
	Serial.print("ERROR: ");
     12e:	6a e0       	ldi	r22, 0x0A	; 10
     130:	71 e0       	ldi	r23, 0x01	; 1
     132:	8a ee       	ldi	r24, 0xEA	; 234
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN5Print5printEPKc>
	Serial.println(_errno);
     13a:	60 91 5e 01 	lds	r22, 0x015E
     13e:	70 91 5f 01 	lds	r23, 0x015F
     142:	4a e0       	ldi	r20, 0x0A	; 10
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	8a ee       	ldi	r24, 0xEA	; 234
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN5Print7printlnEji>
	pinMode(13, OUTPUT);
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	8d e0       	ldi	r24, 0x0D	; 13
     152:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
	digitalWrite(13, HIGH);
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	8d e0       	ldi	r24, 0x0D	; 13
     15a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
     15e:	08 95       	ret

00000160 <_Z12OSCreateTaskiPFvPvES_>:

// Task handling

// prio = Task priority, taskStack = stack for task, rptr = Pointer to task routines, rarg = Arguments to pass to task
unsigned int OSCreateTask(int prio, void (*rptr)(void *), void *rarg)
{
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	dc 01       	movw	r26, r24
     176:	7b 01       	movw	r14, r22
     178:	8a 01       	movw	r16, r20
	unsigned char sreg;
	
	OSMakeAtomic(&sreg);
     17a:	df b7       	in	r29, 0x3f	; 63
     17c:	f8 94       	cli
	if(_procCount>_maxTasks)
     17e:	c0 91 da 01 	lds	r28, 0x01DA
     182:	40 91 db 01 	lds	r20, 0x01DB
     186:	4c 17       	cp	r20, r28
     188:	18 f0       	brcs	.+6      	; 0x190 <_Z12OSCreateTaskiPFvPvES_+0x30>
	#if OSSCHED_TYPE == OS_PRIORITY
	
		// Check if current priority level already exists
		uint8_t i, found=0;
	
		for(i=0; i<_procCount && !found; i++)
     18a:	c1 11       	cpse	r28, r1
     18c:	0a c0       	rjmp	.+20     	; 0x1a2 <_Z12OSCreateTaskiPFvPvES_+0x42>
     18e:	27 c0       	rjmp	.+78     	; 0x1de <_Z12OSCreateTaskiPFvPvES_+0x7e>
	unsigned char sreg;
	
	OSMakeAtomic(&sreg);
	if(_procCount>_maxTasks)
	{
		OSSetError(OS_ERR_MAX_PROCS);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10OSSetErrorj>
#endif

// Error handling
unsigned int OSGetError()
{
	return _errno;
     198:	80 91 5e 01 	lds	r24, 0x015E
     19c:	90 91 5f 01 	lds	r25, 0x015F
	
	OSMakeAtomic(&sreg);
	if(_procCount>_maxTasks)
	{
		OSSetError(OS_ERR_MAX_PROCS);
		return OSGetError();
     1a0:	81 c0       	rjmp	.+258    	; 0x2a4 <_Z12OSCreateTaskiPFvPvES_+0x144>
     1a2:	e3 e7       	ldi	r30, 0x73	; 115
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
	#if OSSCHED_TYPE == OS_PRIORITY
	
		// Check if current priority level already exists
		uint8_t i, found=0;
	
		for(i=0; i<_procCount && !found; i++)
     1a6:	90 e0       	ldi	r25, 0x00	; 0
			found=(_tasks[i].prio==prio);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	20 81       	ld	r18, Z
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	58 2f       	mov	r21, r24
     1b2:	2a 17       	cp	r18, r26
     1b4:	3b 07       	cpc	r19, r27
     1b6:	09 f0       	breq	.+2      	; 0x1ba <_Z12OSCreateTaskiPFvPvES_+0x5a>
     1b8:	57 2f       	mov	r21, r23
	#if OSSCHED_TYPE == OS_PRIORITY
	
		// Check if current priority level already exists
		uint8_t i, found=0;
	
		for(i=0; i<_procCount && !found; i++)
     1ba:	9f 5f       	subi	r25, 0xFF	; 255
     1bc:	9c 17       	cp	r25, r28
     1be:	21 f0       	breq	.+8      	; 0x1c8 <_Z12OSCreateTaskiPFvPvES_+0x68>
     1c0:	3d 96       	adiw	r30, 0x0d	; 13
     1c2:	55 23       	and	r21, r21
     1c4:	99 f3       	breq	.-26     	; 0x1ac <_Z12OSCreateTaskiPFvPvES_+0x4c>
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z12OSCreateTaskiPFvPvES_+0x6c>
			found=(_tasks[i].prio==prio);
	
		if(found)
     1c8:	55 23       	and	r21, r21
     1ca:	49 f0       	breq	.+18     	; 0x1de <_Z12OSCreateTaskiPFvPvES_+0x7e>
		{
			OSSetError(OS_ERR_DUP_PRIO);
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10OSSetErrorj>
#endif

// Error handling
unsigned int OSGetError()
{
	return _errno;
     1d4:	80 91 5e 01 	lds	r24, 0x015E
     1d8:	90 91 5f 01 	lds	r25, 0x015F
			found=(_tasks[i].prio==prio);
	
		if(found)
		{
			OSSetError(OS_ERR_DUP_PRIO);
			return OSGetError();
     1dc:	63 c0       	rjmp	.+198    	; 0x2a4 <_Z12OSCreateTaskiPFvPvES_+0x144>
		}
		// Check for BAD_PRIO. Should be between 0 and _maxTasks
		if(prio != 255 && (prio <0 || prio > _maxTasks))
     1de:	af 3f       	cpi	r26, 0xFF	; 255
     1e0:	b1 05       	cpc	r27, r1
     1e2:	81 f0       	breq	.+32     	; 0x204 <_Z12OSCreateTaskiPFvPvES_+0xa4>
     1e4:	bb 23       	and	r27, r27
     1e6:	2c f0       	brlt	.+10     	; 0x1f2 <_Z12OSCreateTaskiPFvPvES_+0x92>
     1e8:	84 2f       	mov	r24, r20
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	8a 17       	cp	r24, r26
     1ee:	9b 07       	cpc	r25, r27
     1f0:	4c f4       	brge	.+18     	; 0x204 <_Z12OSCreateTaskiPFvPvES_+0xa4>
		{
			OSSetError(OS_ERR_BAD_PRIO);
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10OSSetErrorj>
#endif

// Error handling
unsigned int OSGetError()
{
	return _errno;
     1fa:	80 91 5e 01 	lds	r24, 0x015E
     1fe:	90 91 5f 01 	lds	r25, 0x015F
		}
		// Check for BAD_PRIO. Should be between 0 and _maxTasks
		if(prio != 255 && (prio <0 || prio > _maxTasks))
		{
			OSSetError(OS_ERR_BAD_PRIO);
			return OSGetError();
     202:	50 c0       	rjmp	.+160    	; 0x2a4 <_Z12OSCreateTaskiPFvPvES_+0x144>
		}
		
	#endif
	
	// Insert task
	_tasks[_procCount].prio=prio;
     204:	cc 2e       	mov	r12, r28
     206:	d1 2c       	mov	r13, r1
     208:	2d e0       	ldi	r18, 0x0D	; 13
     20a:	c2 9f       	mul	r28, r18
     20c:	c0 01       	movw	r24, r0
     20e:	11 24       	eor	r1, r1
     210:	fc 01       	movw	r30, r24
     212:	ee 58       	subi	r30, 0x8E	; 142
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	5f 01       	movw	r10, r30
     218:	a1 83       	std	Z+1, r26	; 0x01
	_tasks[_procCount].taskptr=rptr;
     21a:	f2 86       	std	Z+10, r15	; 0x0a
     21c:	e1 86       	std	Z+9, r14	; 0x09
	_tasks[_procCount].rarg=rarg;
     21e:	14 87       	std	Z+12, r17	; 0x0c
     220:	03 87       	std	Z+11, r16	; 0x0b
	_tasks[_procCount].stack=(unsigned long *) calloc((size_t) _taskStackSize, sizeof(unsigned long));
     222:	00 91 07 01 	lds	r16, 0x0107
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	64 e0       	ldi	r22, 0x04	; 4
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	c8 01       	movw	r24, r16
     22e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <calloc>
     232:	f5 01       	movw	r30, r10
     234:	94 83       	std	Z+4, r25	; 0x04
     236:	83 83       	std	Z+3, r24	; 0x03
	
	if(_tasks[_procCount].stack==NULL)
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	49 f4       	brne	.+18     	; 0x24e <_Z12OSCreateTaskiPFvPvES_+0xee>
	{
		OSSetError(OS_ERR_NOMEM);
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10OSSetErrorj>
#endif

// Error handling
unsigned int OSGetError()
{
	return _errno;
     244:	80 91 5e 01 	lds	r24, 0x015E
     248:	90 91 5f 01 	lds	r25, 0x015F
	_tasks[_procCount].stack=(unsigned long *) calloc((size_t) _taskStackSize, sizeof(unsigned long));
	
	if(_tasks[_procCount].stack==NULL)
	{
		OSSetError(OS_ERR_NOMEM);
		return OSGetError();
     24c:	2b c0       	rjmp	.+86     	; 0x2a4 <_Z12OSCreateTaskiPFvPvES_+0x144>
	}
	
	_tasks[_procCount].sp=(unsigned long) &(_tasks[_procCount].stack[_taskStackSize-1]);
     24e:	2d e0       	ldi	r18, 0x0D	; 13
     250:	2c 9d       	mul	r18, r12
     252:	f0 01       	movw	r30, r0
     254:	2d 9d       	mul	r18, r13
     256:	f0 0d       	add	r31, r0
     258:	11 24       	eor	r1, r1
     25a:	ee 58       	subi	r30, 0x8E	; 142
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	01 50       	subi	r16, 0x01	; 1
     260:	10 4c       	sbci	r17, 0xC0	; 192
     262:	00 0f       	add	r16, r16
     264:	11 1f       	adc	r17, r17
     266:	00 0f       	add	r16, r16
     268:	11 1f       	adc	r17, r17
     26a:	80 0f       	add	r24, r16
     26c:	91 1f       	adc	r25, r17
     26e:	09 2e       	mov	r0, r25
     270:	00 0c       	add	r0, r0
     272:	aa 0b       	sbc	r26, r26
     274:	bb 0b       	sbc	r27, r27
     276:	85 83       	std	Z+5, r24	; 0x05
     278:	96 83       	std	Z+6, r25	; 0x06
     27a:	a7 83       	std	Z+7, r26	; 0x07
     27c:	b0 87       	std	Z+8, r27	; 0x08
	_tasks[_procCount].pid=_procCount;
     27e:	c0 83       	st	Z, r28
	_tasks[_procCount].status|=_OS_FIRSTRUN;
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	81 60       	ori	r24, 0x01	; 1
     284:	82 83       	std	Z+2, r24	; 0x02

	
	// Insert into ready queue
	procEnq(_procCount, _tasks, &_ready);
     286:	44 e6       	ldi	r20, 0x64	; 100
     288:	51 e0       	ldi	r21, 0x01	; 1
     28a:	62 e7       	ldi	r22, 0x72	; 114
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	c6 01       	movw	r24, r12
     290:	0e 94 b9 04 	call	0x972	; 0x972 <_Z7procEnqiP2tcP2tq>
	_procCount++;
     294:	80 91 da 01 	lds	r24, 0x01DA
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	80 93 da 01 	sts	0x01DA, r24

	OSExitAtomic(sreg);
     29e:	df bf       	out	0x3f, r29	; 63
	return OS_NO_ERR;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	bf 90       	pop	r11
     2b6:	af 90       	pop	r10
     2b8:	08 95       	ret

000002ba <_Z11OSSchedulerv>:

void OSScheduler()
{
     2ba:	cf 93       	push	r28
	// Remove first item from queue
	unsigned char _nextRun=procPeek(&_ready);
     2bc:	84 e6       	ldi	r24, 0x64	; 100
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 bc 04 	call	0x978	; 0x978 <_Z8procPeekP2tq>
	
	// Check to see that it is a proper process
	if(_nextRun != 255)
     2c4:	8f 3f       	cpi	r24, 0xFF	; 255
     2c6:	09 f4       	brne	.+2      	; 0x2ca <_Z11OSSchedulerv+0x10>
     2c8:	55 c0       	rjmp	.+170    	; 0x374 <_Z11OSSchedulerv+0xba>
#if OSSCHED_TYPE==OS_PRIORITY
	if(_running==255 || _tasks[_nextRun].prio < _tasks[_running].prio || _forcedSwap)
     2ca:	a0 91 06 01 	lds	r26, 0x0106
     2ce:	af 3f       	cpi	r26, 0xFF	; 255
     2d0:	a1 f0       	breq	.+40     	; 0x2fa <_Z11OSSchedulerv+0x40>
     2d2:	9d e0       	ldi	r25, 0x0D	; 13
     2d4:	98 9f       	mul	r25, r24
     2d6:	f0 01       	movw	r30, r0
     2d8:	11 24       	eor	r1, r1
     2da:	ee 58       	subi	r30, 0x8E	; 142
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	9a 9f       	mul	r25, r26
     2e0:	d0 01       	movw	r26, r0
     2e2:	11 24       	eor	r1, r1
     2e4:	ae 58       	subi	r26, 0x8E	; 142
     2e6:	be 4f       	sbci	r27, 0xFE	; 254
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	11 96       	adiw	r26, 0x01	; 1
     2ec:	8c 91       	ld	r24, X
     2ee:	98 17       	cp	r25, r24
     2f0:	20 f0       	brcs	.+8      	; 0x2fa <_Z11OSSchedulerv+0x40>
     2f2:	80 91 5d 01 	lds	r24, 0x015D
     2f6:	88 23       	and	r24, r24
     2f8:	e9 f1       	breq	.+122    	; 0x374 <_Z11OSSchedulerv+0xba>
#endif
	{
		_nextRun=procDeq(&_ready);
     2fa:	84 e6       	ldi	r24, 0x64	; 100
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z7procDeqP2tq>
     302:	c8 2f       	mov	r28, r24
		if(_running!=255 && _nextRun !=  _running)
     304:	e0 91 06 01 	lds	r30, 0x0106
     308:	ef 3f       	cpi	r30, 0xFF	; 255
     30a:	01 f1       	breq	.+64     	; 0x34c <_Z11OSSchedulerv+0x92>
     30c:	8e 17       	cp	r24, r30
     30e:	f1 f0       	breq	.+60     	; 0x34c <_Z11OSSchedulerv+0x92>
		{
			_tasks[_running].sp=pxCurrentTCB;
     310:	2e 2f       	mov	r18, r30
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	8d e0       	ldi	r24, 0x0D	; 13
     316:	e8 9f       	mul	r30, r24
     318:	f0 01       	movw	r30, r0
     31a:	11 24       	eor	r1, r1
     31c:	ee 58       	subi	r30, 0x8E	; 142
     31e:	fe 4f       	sbci	r31, 0xFE	; 254
     320:	40 91 e5 01 	lds	r20, 0x01E5
     324:	50 91 e6 01 	lds	r21, 0x01E6
     328:	60 91 e7 01 	lds	r22, 0x01E7
     32c:	70 91 e8 01 	lds	r23, 0x01E8
     330:	45 83       	std	Z+5, r20	; 0x05
     332:	56 83       	std	Z+6, r21	; 0x06
     334:	67 83       	std	Z+7, r22	; 0x07
     336:	70 87       	std	Z+8, r23	; 0x08
			
			// Push to READY queue if not blocked
			if(!(_tasks[_running].status & _OS_BLOCKED))
     338:	92 81       	ldd	r25, Z+2	; 0x02
     33a:	91 fd       	sbrc	r25, 1
     33c:	07 c0       	rjmp	.+14     	; 0x34c <_Z11OSSchedulerv+0x92>
				procEnq(_running, _tasks, &_ready);
     33e:	44 e6       	ldi	r20, 0x64	; 100
     340:	51 e0       	ldi	r21, 0x01	; 1
     342:	62 e7       	ldi	r22, 0x72	; 114
     344:	71 e0       	ldi	r23, 0x01	; 1
     346:	c9 01       	movw	r24, r18
     348:	0e 94 b9 04 	call	0x972	; 0x972 <_Z7procEnqiP2tcP2tq>
		}

		pxCurrentTCB=_tasks[_nextRun].sp;
     34c:	8d e0       	ldi	r24, 0x0D	; 13
     34e:	c8 9f       	mul	r28, r24
     350:	f0 01       	movw	r30, r0
     352:	11 24       	eor	r1, r1
     354:	ee 58       	subi	r30, 0x8E	; 142
     356:	fe 4f       	sbci	r31, 0xFE	; 254
     358:	85 81       	ldd	r24, Z+5	; 0x05
     35a:	96 81       	ldd	r25, Z+6	; 0x06
     35c:	a7 81       	ldd	r26, Z+7	; 0x07
     35e:	b0 85       	ldd	r27, Z+8	; 0x08
     360:	80 93 e5 01 	sts	0x01E5, r24
     364:	90 93 e6 01 	sts	0x01E6, r25
     368:	a0 93 e7 01 	sts	0x01E7, r26
     36c:	b0 93 e8 01 	sts	0x01E8, r27
		_running=_nextRun;
     370:	c0 93 06 01 	sts	0x0106, r28
		
	}
	
}
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <_Z7_OSSwaph>:
	}
}

void _OSSwap(unsigned char forcedSwap)
{
	portSAVE_CONTEXT();
     378:	90 91 e9 01 	lds	r25, 0x01E9
     37c:	0f 92       	push	r0
     37e:	09 2e       	mov	r0, r25
     380:	f8 94       	cli
     382:	0f 92       	push	r0
     384:	1f 92       	push	r1
     386:	11 24       	eor	r1, r1
     388:	2f 92       	push	r2
     38a:	3f 92       	push	r3
     38c:	4f 92       	push	r4
     38e:	5f 92       	push	r5
     390:	6f 92       	push	r6
     392:	7f 92       	push	r7
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	ad b7       	in	r26, 0x3d	; 61
     3c6:	be b7       	in	r27, 0x3e	; 62
     3c8:	b0 93 e6 01 	sts	0x01E6, r27
     3cc:	a0 93 e5 01 	sts	0x01E5, r26
	cli();
     3d0:	f8 94       	cli
	
	if(!_suspend)
     3d2:	90 91 5c 01 	lds	r25, 0x015C
     3d6:	91 11       	cpse	r25, r1
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <_Z7_OSSwaph+0x6a>
	{
		_forcedSwap=forcedSwap;
     3da:	80 93 5d 01 	sts	0x015D, r24
		OSScheduler();
     3de:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z11OSSchedulerv>
}

inline void runTask()
{
	// Check if this is the first run of this process
	if(_tasks[_running].status & _OS_FIRSTRUN)
     3e2:	e0 91 06 01 	lds	r30, 0x0106
     3e6:	2e 2f       	mov	r18, r30
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	8d e0       	ldi	r24, 0x0D	; 13
     3ec:	e8 9f       	mul	r30, r24
     3ee:	f0 01       	movw	r30, r0
     3f0:	11 24       	eor	r1, r1
     3f2:	ee 58       	subi	r30, 0x8E	; 142
     3f4:	fe 4f       	sbci	r31, 0xFE	; 254
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	80 ff       	sbrs	r24, 0
     3fa:	38 c0       	rjmp	.+112    	; 0x46c <_Z7_OSSwaph+0xf4>
	{
		_tasks[_running].status &= ~(_OS_FIRSTRUN);
     3fc:	9d e0       	ldi	r25, 0x0D	; 13
     3fe:	92 9f       	mul	r25, r18
     400:	f0 01       	movw	r30, r0
     402:	93 9f       	mul	r25, r19
     404:	f0 0d       	add	r31, r0
     406:	11 24       	eor	r1, r1
     408:	ee 58       	subi	r30, 0x8E	; 142
     40a:	fe 4f       	sbci	r31, 0xFE	; 254
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	82 83       	std	Z+2, r24	; 0x02
		portSetStack();
     410:	80 91 e5 01 	lds	r24, 0x01E5
     414:	90 91 e6 01 	lds	r25, 0x01E6
     418:	a0 91 e7 01 	lds	r26, 0x01E7
     41c:	b0 91 e8 01 	lds	r27, 0x01E8
     420:	8d bf       	out	0x3d, r24	; 61
     422:	9e bf       	out	0x3e, r25	; 62
		// Run the function by setting (R25,R24) = function argument and pushing the start
		// address of the function onto the stack
		pxFuncPtr=(unsigned long) _tasks[_running].taskptr;
     424:	81 85       	ldd	r24, Z+9	; 0x09
     426:	92 85       	ldd	r25, Z+10	; 0x0a
     428:	09 2e       	mov	r0, r25
     42a:	00 0c       	add	r0, r0
     42c:	aa 0b       	sbc	r26, r26
     42e:	bb 0b       	sbc	r27, r27
     430:	80 93 e1 01 	sts	0x01E1, r24
     434:	90 93 e2 01 	sts	0x01E2, r25
     438:	a0 93 e3 01 	sts	0x01E3, r26
     43c:	b0 93 e4 01 	sts	0x01E4, r27
		pxFuncArg=(unsigned long) _tasks[_running].rarg;
     440:	43 85       	ldd	r20, Z+11	; 0x0b
     442:	54 85       	ldd	r21, Z+12	; 0x0c
     444:	05 2e       	mov	r0, r21
     446:	00 0c       	add	r0, r0
     448:	66 0b       	sbc	r22, r22
     44a:	77 0b       	sbc	r23, r23
     44c:	40 93 dd 01 	sts	0x01DD, r20
     450:	50 93 de 01 	sts	0x01DE, r21
     454:	60 93 df 01 	sts	0x01DF, r22
     458:	70 93 e0 01 	sts	0x01E0, r23
		portPushRetAddress();
     45c:	08 2e       	mov	r0, r24
     45e:	0f 92       	push	r0
     460:	09 2e       	mov	r0, r25
     462:	0f 92       	push	r0
     464:	95 2f       	mov	r25, r21
     466:	84 2f       	mov	r24, r20
		sei();
     468:	78 94       	sei
     46a:	30 c0       	rjmp	.+96     	; 0x4cc <_Z6OSSwapv>
	}
	else
	{
		portRESTORE_CONTEXT();
     46c:	80 91 e5 01 	lds	r24, 0x01E5
     470:	90 91 e6 01 	lds	r25, 0x01E6
     474:	a0 91 e7 01 	lds	r26, 0x01E7
     478:	b0 91 e8 01 	lds	r27, 0x01E8
     47c:	f8 94       	cli
     47e:	8d bf       	out	0x3d, r24	; 61
     480:	9e bf       	out	0x3e, r25	; 62
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	7f 91       	pop	r23
     494:	6f 91       	pop	r22
     496:	5f 91       	pop	r21
     498:	4f 91       	pop	r20
     49a:	3f 91       	pop	r19
     49c:	2f 91       	pop	r18
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	7f 90       	pop	r7
     4b4:	6f 90       	pop	r6
     4b6:	5f 90       	pop	r5
     4b8:	4f 90       	pop	r4
     4ba:	3f 90       	pop	r3
     4bc:	2f 90       	pop	r2
     4be:	1f 90       	pop	r1
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	80 2d       	mov	r24, r0
     4c6:	0f 90       	pop	r0
     4c8:	80 93 e9 01 	sts	0x01E9, r24

000004cc <_Z6OSSwapv>:
}

// Swaps task. Causes current task to relinquish control of the CPU. Scheduler selects next task to run.
void OSSwap()
{
	_csreg = SREG;
     4cc:	8f b7       	in	r24, 0x3f	; 63
     4ce:	80 93 e9 01 	sts	0x01E9, r24
	_OSSwap(1);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 bc 01 	call	0x378	; 0x378 <_Z7_OSSwaph>
	asm("ret");
     4d8:	08 95       	ret

000004da <_Z7OSSleepm>:

	// Sleep routine. Sleeps in milliseconds
	void OSSleep(unsigned long millis)
	{
		unsigned char sreg;
		OSMakeAtomic(&sreg);
     4da:	5f b7       	in	r21, 0x3f	; 63
     4dc:	f8 94       	cli
		// Set sleep time
		_sleepTime[_running]=millis-1;
     4de:	40 91 06 01 	lds	r20, 0x0106
     4e2:	24 2f       	mov	r18, r20
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e4 5c       	subi	r30, 0xC4	; 196
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	a1 09       	sbc	r26, r1
     4fc:	b1 09       	sbc	r27, r1
     4fe:	80 83       	st	Z, r24
     500:	91 83       	std	Z+1, r25	; 0x01
     502:	a2 83       	std	Z+2, r26	; 0x02
     504:	b3 83       	std	Z+3, r27	; 0x03
		
		if(_sleepTime[_running]<0)
			_sleepTime[_running]=0;
			
		_sleepFlag |= (1<<_running);
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <_Z7OSSleepm+0x36>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	4a 95       	dec	r20
     512:	e2 f7       	brpl	.-8      	; 0x50c <_Z7OSSleepm+0x32>
     514:	60 91 3a 01 	lds	r22, 0x013A
     518:	70 91 3b 01 	lds	r23, 0x013B
     51c:	86 2b       	or	r24, r22
     51e:	97 2b       	or	r25, r23
     520:	90 93 3b 01 	sts	0x013B, r25
     524:	80 93 3a 01 	sts	0x013A, r24
	
		// Set blocked flag
		_tasks[_running].status|=_OS_BLOCKED;
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	82 9f       	mul	r24, r18
     52c:	f0 01       	movw	r30, r0
     52e:	83 9f       	mul	r24, r19
     530:	f0 0d       	add	r31, r0
     532:	11 24       	eor	r1, r1
     534:	ee 58       	subi	r30, 0x8E	; 142
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	82 81       	ldd	r24, Z+2	; 0x02
     53a:	82 60       	ori	r24, 0x02	; 2
     53c:	82 83       	std	Z+2, r24	; 0x02
	
		// Note: No need to remove from READY queue because a _running process would have already been de-queued from there.
		// So just call scheduler to swap.
	
		OSExitAtomic(sreg);
     53e:	5f bf       	out	0x3f, r21	; 63
		OSSwap();
     540:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z6OSSwapv>
     544:	08 95       	ret

00000546 <_Z10OSPrioSwapv>:
	asm("reti");
}

void OSPrioSwap()
{
	_csreg = SREG;
     546:	8f b7       	in	r24, 0x3f	; 63
     548:	80 93 e9 01 	sts	0x01E9, r24
	_OSSwap(0);
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 bc 01 	call	0x378	; 0x378 <_Z7_OSSwaph>
	asm("ret");
     552:	08 95       	ret

00000554 <__vector_9>:
}


ISR(TIMER2_OVF_vect, ISR_NAKED)
{
	OSMakeAtomic(&_csreg);
     554:	8f b7       	in	r24, 0x3f	; 63
     556:	80 93 e9 01 	sts	0x01E9, r24
     55a:	f8 94       	cli
	
	// Increment tick counter
	_osticks++;
     55c:	80 91 60 01 	lds	r24, 0x0160
     560:	90 91 61 01 	lds	r25, 0x0161
     564:	a0 91 62 01 	lds	r26, 0x0162
     568:	b0 91 63 01 	lds	r27, 0x0163
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	a1 1d       	adc	r26, r1
     570:	b1 1d       	adc	r27, r1
     572:	80 93 60 01 	sts	0x0160, r24
     576:	90 93 61 01 	sts	0x0161, r25
     57a:	a0 93 62 01 	sts	0x0162, r26
     57e:	b0 93 63 01 	sts	0x0163, r27

	#if OSUSE_SLEEP==1
		// Decrement wait counters
		unsigned char i;
	
		for(i=0; i<_maxTasks; i++)
     582:	80 91 db 01 	lds	r24, 0x01DB
     586:	88 23       	and	r24, r24
     588:	09 f4       	brne	.+2      	; 0x58c <__vector_9+0x38>
     58a:	5c c0       	rjmp	.+184    	; 0x644 <__vector_9+0xf0>
     58c:	c0 e0       	ldi	r28, 0x00	; 0
				_sleepTime[i]--;
			else
				if(_sleepFlag & (0b1 << i))
				{
					// Clear the flag
					_sleepFlag &= ~(0b1 << i);
     58e:	01 e0       	ldi	r16, 0x01	; 1
     590:	10 e0       	ldi	r17, 0x00	; 0
				
					// Unblock the task
					_tasks[i].status &= ~(_OS_BLOCKED);
     592:	dd e0       	ldi	r29, 0x0D	; 13
	#if OSUSE_SLEEP==1
		// Decrement wait counters
		unsigned char i;
	
		for(i=0; i<_maxTasks; i++)
			if(_sleepTime[i]>0)
     594:	8c 2f       	mov	r24, r28
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	fc 01       	movw	r30, r24
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	e4 5c       	subi	r30, 0xC4	; 196
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	40 81       	ld	r20, Z
     5a8:	51 81       	ldd	r21, Z+1	; 0x01
     5aa:	62 81       	ldd	r22, Z+2	; 0x02
     5ac:	73 81       	ldd	r23, Z+3	; 0x03
     5ae:	41 15       	cp	r20, r1
     5b0:	51 05       	cpc	r21, r1
     5b2:	61 05       	cpc	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <__vector_9+0x84>
				_sleepTime[i]--;
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	fc 01       	movw	r30, r24
     5c2:	e4 5c       	subi	r30, 0xC4	; 196
     5c4:	fe 4f       	sbci	r31, 0xFE	; 254
     5c6:	41 50       	subi	r20, 0x01	; 1
     5c8:	51 09       	sbc	r21, r1
     5ca:	61 09       	sbc	r22, r1
     5cc:	71 09       	sbc	r23, r1
     5ce:	40 83       	st	Z, r20
     5d0:	51 83       	std	Z+1, r21	; 0x01
     5d2:	62 83       	std	Z+2, r22	; 0x02
     5d4:	73 83       	std	Z+3, r23	; 0x03
     5d6:	30 c0       	rjmp	.+96     	; 0x638 <__vector_9+0xe4>
			else
				if(_sleepFlag & (0b1 << i))
     5d8:	20 91 3a 01 	lds	r18, 0x013A
     5dc:	30 91 3b 01 	lds	r19, 0x013B
     5e0:	a9 01       	movw	r20, r18
     5e2:	0c 2e       	mov	r0, r28
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__vector_9+0x96>
     5e6:	55 95       	asr	r21
     5e8:	47 95       	ror	r20
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__vector_9+0x92>
     5ee:	40 ff       	sbrs	r20, 0
     5f0:	23 c0       	rjmp	.+70     	; 0x638 <__vector_9+0xe4>
				{
					// Clear the flag
					_sleepFlag &= ~(0b1 << i);
     5f2:	a8 01       	movw	r20, r16
     5f4:	0c 2e       	mov	r0, r28
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__vector_9+0xa8>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <__vector_9+0xa4>
     600:	40 95       	com	r20
     602:	50 95       	com	r21
     604:	24 23       	and	r18, r20
     606:	35 23       	and	r19, r21
     608:	30 93 3b 01 	sts	0x013B, r19
     60c:	20 93 3a 01 	sts	0x013A, r18
				
					// Unblock the task
					_tasks[i].status &= ~(_OS_BLOCKED);
     610:	d8 9f       	mul	r29, r24
     612:	f0 01       	movw	r30, r0
     614:	d9 9f       	mul	r29, r25
     616:	f0 0d       	add	r31, r0
     618:	11 24       	eor	r1, r1
     61a:	ee 58       	subi	r30, 0x8E	; 142
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	22 81       	ldd	r18, Z+2	; 0x02
     620:	2d 7f       	andi	r18, 0xFD	; 253
     622:	22 83       	std	Z+2, r18	; 0x02
					// Put onto ready queue, call scheduler
					procEnq(i, _tasks, &_ready);
     624:	44 e6       	ldi	r20, 0x64	; 100
     626:	51 e0       	ldi	r21, 0x01	; 1
     628:	62 e7       	ldi	r22, 0x72	; 114
     62a:	71 e0       	ldi	r23, 0x01	; 1
     62c:	0e 94 b9 04 	call	0x972	; 0x972 <_Z7procEnqiP2tcP2tq>
				
					// Call scheduler if this is fixed priority
				
					#if OSSCHED_TYPE==OS_PRIORITY && OS_PREEMPTIVE==1
						_OSSwap(0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 bc 01 	call	0x378	; 0x378 <_Z7_OSSwaph>
						asm("reti");
     636:	18 95       	reti

	#if OSUSE_SLEEP==1
		// Decrement wait counters
		unsigned char i;
	
		for(i=0; i<_maxTasks; i++)
     638:	cf 5f       	subi	r28, 0xFF	; 255
     63a:	80 91 db 01 	lds	r24, 0x01DB
     63e:	c8 17       	cp	r28, r24
     640:	08 f4       	brcc	.+2      	; 0x644 <__vector_9+0xf0>
     642:	a8 cf       	rjmp	.-176    	; 0x594 <__vector_9+0x40>
						_OSSwap(0);
						asm("reti");
					#endif
				}
	#endif
	OSExitAtomic(_csreg);
     644:	80 91 e9 01 	lds	r24, 0x01E9
     648:	8f bf       	out	0x3f, r24	; 63
	asm("reti");
     64a:	18 95       	reti

0000064c <_Z14configureTimerv>:
}

void configureTimer()
{
	// Set fast PWM, OC2A and OC2B disconnected.
	TCCR2A=0b00000011;
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	80 93 b0 00 	sts	0x00B0, r24
	TCNT2=0;
     652:	10 92 b2 00 	sts	0x00B2, r1
	
	// Enable TOV2
	TIMSK2|=0b1;
     656:	e0 e7       	ldi	r30, 0x70	; 112
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	81 60       	ori	r24, 0x01	; 1
     65e:	80 83       	st	Z, r24
     660:	08 95       	ret

00000662 <_Z6OSInith>:
	TCCR2B=0b00000100;
}

// OS Initialization and Starting Routines
void OSInit(unsigned char numTasks)
{
     662:	cf 93       	push	r28
     664:	c8 2f       	mov	r28, r24
	configureTimer();
     666:	0e 94 26 03 	call	0x64c	; 0x64c <_Z14configureTimerv>

	_numTasks=numTasks;
     66a:	c0 93 dc 01 	sts	0x01DC, r28
	_maxTasks=numTasks+1;
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	6c 0f       	add	r22, r28
     672:	60 93 db 01 	sts	0x01DB, r22
	_suspend=0;
     676:	10 92 5c 01 	sts	0x015C, r1
	// Initialization code for fixed priority. +1 for idle task
	initQ(_readybuf, _maxTasks, &_ready);
     67a:	44 e6       	ldi	r20, 0x64	; 100
     67c:	51 e0       	ldi	r21, 0x01	; 1
     67e:	8a e6       	ldi	r24, 0x6A	; 106
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z5initQPhhP2tq>
	
}
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <_Z5OSRunv>:
	while(1);
}

void OSRun()
{
	OSMakeAtomic(&_csreg);
     68a:	8f b7       	in	r24, 0x3f	; 63
     68c:	80 93 e9 01 	sts	0x01E9, r24
     690:	f8 94       	cli
	// Create idle task
	OSCreateTask(255, _OSIdle, NULL);
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	69 e8       	ldi	r22, 0x89	; 137
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 b0 00 	call	0x160	; 0x160 <_Z12OSCreateTaskiPFvPvES_>
}

void startTimer()
{
	// Start timer giving frequency of approx 1000 Hz
	TCCR2B=0b00000100;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	80 93 b1 00 	sts	0x00B1, r24
	// Create idle task
	OSCreateTask(255, _OSIdle, NULL);

	startTimer();
	
	OSExitAtomic(_csreg);
     6a8:	80 91 e9 01 	lds	r24, 0x01E9
     6ac:	8f bf       	out	0x3f, r24	; 63
	OSSwap();
     6ae:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z6OSSwapv>
     6b2:	08 95       	ret

000006b4 <_Z12OSCreateSemaP2bsjh>:
#include "sema.h"

#if OSUSE_SEMA==1

void OSCreateSema(TOSSema *sema, unsigned int initval, unsigned char isBinary)
{
     6b4:	cf 93       	push	r28
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     6b6:	cf b7       	in	r28, 0x3f	; 63
     6b8:	f8 94       	cli
	sema->isBinary=isBinary;
     6ba:	24 2f       	mov	r18, r20
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	33 83       	std	Z+3, r19	; 0x03
     6c2:	22 83       	std	Z+2, r18	; 0x02
	
	if(!isBinary)
     6c4:	41 11       	cpse	r20, r1
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <_Z12OSCreateSemaP2bsjh+0x1a>
		sema->semaval=initval;
     6c8:	71 83       	std	Z+1, r23	; 0x01
     6ca:	60 83       	st	Z, r22
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <_Z12OSCreateSemaP2bsjh+0x30>
	else
		if(initval)
     6ce:	67 2b       	or	r22, r23
     6d0:	31 f0       	breq	.+12     	; 0x6de <_Z12OSCreateSemaP2bsjh+0x2a>
			sema->semaval=1;
     6d2:	21 e0       	ldi	r18, 0x01	; 1
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	fc 01       	movw	r30, r24
     6d8:	31 83       	std	Z+1, r19	; 0x01
     6da:	20 83       	st	Z, r18
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <_Z12OSCreateSemaP2bsjh+0x30>
		else
			sema->semaval=0;
     6de:	fc 01       	movw	r30, r24
     6e0:	11 82       	std	Z+1, r1	; 0x01
     6e2:	10 82       	st	Z, r1
			
	initQ(sema->tasklist, _maxTasks, &sema->taskQ);
     6e4:	ac 01       	movw	r20, r24
     6e6:	44 5f       	subi	r20, 0xF4	; 244
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	60 91 db 01 	lds	r22, 0x01DB
     6ee:	04 96       	adiw	r24, 0x04	; 4
     6f0:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z5initQPhhP2tq>
	OSExitAtomic(sreg);
     6f4:	cf bf       	out	0x3f, r28	; 63
}
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_Z10OSTakeSemaP2bs>:

void OSTakeSema(TOSSema *sema)
{
     6fa:	cf 93       	push	r28
	unsigned char sreg;
	
	OSMakeAtomic(&sreg);
     6fc:	cf b7       	in	r28, 0x3f	; 63
     6fe:	f8 94       	cli
	if(sema->semaval>0)
     700:	fc 01       	movw	r30, r24
     702:	20 81       	ld	r18, Z
     704:	31 81       	ldd	r19, Z+1	; 0x01
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	29 f0       	breq	.+10     	; 0x716 <_Z10OSTakeSemaP2bs+0x1c>
		sema->semaval--;
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	31 09       	sbc	r19, r1
     710:	31 83       	std	Z+1, r19	; 0x01
     712:	20 83       	st	Z, r18
     714:	17 c0       	rjmp	.+46     	; 0x744 <_Z10OSTakeSemaP2bs+0x4a>
	else
	{
		// Block current process
		_tasks[_running].status |= _OS_BLOCKED;
     716:	30 91 06 01 	lds	r19, 0x0106
     71a:	2d e0       	ldi	r18, 0x0D	; 13
     71c:	32 9f       	mul	r19, r18
     71e:	f0 01       	movw	r30, r0
     720:	11 24       	eor	r1, r1
     722:	ee 58       	subi	r30, 0x8E	; 142
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	22 81       	ldd	r18, Z+2	; 0x02
     728:	22 60       	ori	r18, 0x02	; 2
     72a:	22 83       	std	Z+2, r18	; 0x02
		
		// Enqueue this task
		prioEnq(_running, _tasks, &sema->taskQ);
     72c:	ac 01       	movw	r20, r24
     72e:	44 5f       	subi	r20, 0xF4	; 244
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	62 e7       	ldi	r22, 0x72	; 114
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	83 2f       	mov	r24, r19
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z7prioEnqiP2tcP2tq>
		OSExitAtomic(sreg);
     73e:	cf bf       	out	0x3f, r28	; 63

		// Call scheduler.
		OSSwap();
     740:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z6OSSwapv>
	}
	OSExitAtomic(sreg);
     744:	cf bf       	out	0x3f, r28	; 63
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <_Z10OSGiveSemaP2bs>:

void OSGiveSema(TOSSema *sema)
{
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     752:	1f b7       	in	r17, 0x3f	; 63
     754:	f8 94       	cli

	unsigned char tsk=procDeq(&sema->taskQ);
     756:	0c 96       	adiw	r24, 0x0c	; 12
     758:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z7procDeqP2tq>
	
	if(tsk != 255)
     75c:	8f 3f       	cpi	r24, 0xFF	; 255
     75e:	a1 f0       	breq	.+40     	; 0x788 <_Z10OSGiveSemaP2bs+0x3e>
	{
		// Removed blocked flag
		_tasks[tsk].status &= ~(_OS_BLOCKED);
     760:	9d e0       	ldi	r25, 0x0D	; 13
     762:	89 9f       	mul	r24, r25
     764:	f0 01       	movw	r30, r0
     766:	11 24       	eor	r1, r1
     768:	ee 58       	subi	r30, 0x8E	; 142
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	92 81       	ldd	r25, Z+2	; 0x02
     76e:	9d 7f       	andi	r25, 0xFD	; 253
     770:	92 83       	std	Z+2, r25	; 0x02
		procEnq(tsk, _tasks, &_ready);
     772:	44 e6       	ldi	r20, 0x64	; 100
     774:	51 e0       	ldi	r21, 0x01	; 1
     776:	62 e7       	ldi	r22, 0x72	; 114
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 b9 04 	call	0x972	; 0x972 <_Z7procEnqiP2tcP2tq>
		
		// Call scheduler
		OSExitAtomic(sreg);
     780:	1f bf       	out	0x3f, r17	; 63
		OSPrioSwap();
     782:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10OSPrioSwapv>
     786:	0e c0       	rjmp	.+28     	; 0x7a4 <_Z10OSGiveSemaP2bs+0x5a>
	}
	else
		if(sema->isBinary)
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	9b 81       	ldd	r25, Y+3	; 0x03
     78c:	89 2b       	or	r24, r25
     78e:	29 f0       	breq	.+10     	; 0x79a <_Z10OSGiveSemaP2bs+0x50>
			sema->semaval=1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	99 83       	std	Y+1, r25	; 0x01
     796:	88 83       	st	Y, r24
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <_Z10OSGiveSemaP2bs+0x5a>
		else
			sema->semaval++;
     79a:	88 81       	ld	r24, Y
     79c:	99 81       	ldd	r25, Y+1	; 0x01
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	99 83       	std	Y+1, r25	; 0x01
     7a2:	88 83       	st	Y, r24
	OSExitAtomic(sreg);
     7a4:	1f bf       	out	0x3f, r17	; 63
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	08 95       	ret

000007ae <_Z7prioEnqiP2tcP2tq>:
 */

#include "kernel.h"
// Priority queue routines
void prioEnq(int pid, tTCB *tasklist, tQueue *q)
{
     7ae:	2f 92       	push	r2
     7b0:	3f 92       	push	r3
     7b2:	4f 92       	push	r4
     7b4:	5f 92       	push	r5
     7b6:	6f 92       	push	r6
     7b8:	7f 92       	push	r7
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	5c 01       	movw	r10, r24
     7d4:	6b 01       	movw	r12, r22
     7d6:	ea 01       	movw	r28, r20
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     7d8:	3f b6       	in	r3, 0x3f	; 63
     7da:	f8 94       	cli

	unsigned char i;
	unsigned int iter=q->head;
     7dc:	2a 80       	ldd	r2, Y+2	; 0x02
	unsigned char flag=0;
	
	if(q->ctr >= q->len)
     7de:	4c 81       	ldd	r20, Y+4	; 0x04
     7e0:	8d 81       	ldd	r24, Y+5	; 0x05
     7e2:	84 17       	cp	r24, r20
     7e4:	c0 f4       	brcc	.+48     	; 0x816 <_Z7prioEnqiP2tcP2tq+0x68>
{
	unsigned char sreg;
	OSMakeAtomic(&sreg);

	unsigned char i;
	unsigned int iter=q->head;
     7e6:	22 2d       	mov	r18, r2
     7e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		OSExitAtomic(sreg);
		return;
	}
			
	while(iter != q->tail && !flag)
     7ea:	7b 80       	ldd	r7, Y+3	; 0x03
     7ec:	07 2d       	mov	r16, r7
     7ee:	10 e0       	ldi	r17, 0x00	; 0
	{
		flag=(tasklist[q->qptr[iter]].prio > tasklist[pid].prio);
     7f0:	8d e0       	ldi	r24, 0x0D	; 13
     7f2:	8a 9d       	mul	r24, r10
     7f4:	70 01       	movw	r14, r0
     7f6:	8b 9d       	mul	r24, r11
     7f8:	f0 0c       	add	r15, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	e6 0e       	add	r14, r22
     7fe:	f7 1e       	adc	r15, r23
     800:	e0 e0       	ldi	r30, 0x00	; 0
     802:	0f 2e       	mov	r0, r31
     804:	fd e0       	ldi	r31, 0x0D	; 13
     806:	5f 2e       	mov	r5, r31
     808:	f0 2d       	mov	r31, r0
     80a:	66 24       	eor	r6, r6
     80c:	63 94       	inc	r6
     80e:	41 2c       	mov	r4, r1
			
		if(!flag)
			iter=(iter+1) % q->len;
     810:	84 2e       	mov	r8, r20
     812:	91 2c       	mov	r9, r1
     814:	1d c0       	rjmp	.+58     	; 0x850 <_Z7prioEnqiP2tcP2tq+0xa2>
	unsigned int iter=q->head;
	unsigned char flag=0;
	
	if(q->ctr >= q->len)
	{
		OSExitAtomic(sreg);
     816:	3f be       	out	0x3f, r3	; 63
     818:	99 c0       	rjmp	.+306    	; 0x94c <__stack+0x4d>
		return;
	}
			
	while(iter != q->tail && !flag)
	{
		flag=(tasklist[q->qptr[iter]].prio > tasklist[pid].prio);
     81a:	e8 81       	ld	r30, Y
     81c:	f9 81       	ldd	r31, Y+1	; 0x01
     81e:	e2 0f       	add	r30, r18
     820:	f3 1f       	adc	r31, r19
     822:	80 81       	ld	r24, Z
     824:	d6 01       	movw	r26, r12
     826:	58 9e       	mul	r5, r24
     828:	a0 0d       	add	r26, r0
     82a:	b1 1d       	adc	r27, r1
     82c:	11 24       	eor	r1, r1
     82e:	e6 2d       	mov	r30, r6
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	9c 91       	ld	r25, X
     834:	d7 01       	movw	r26, r14
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	8c 91       	ld	r24, X
     83a:	89 17       	cp	r24, r25
     83c:	08 f0       	brcs	.+2      	; 0x840 <_Z7prioEnqiP2tcP2tq+0x92>
     83e:	e4 2d       	mov	r30, r4
			
		if(!flag)
     840:	e1 11       	cpse	r30, r1
     842:	06 c0       	rjmp	.+12     	; 0x850 <_Z7prioEnqiP2tcP2tq+0xa2>
			iter=(iter+1) % q->len;
     844:	c9 01       	movw	r24, r18
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	b4 01       	movw	r22, r8
     84a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodhi4>
     84e:	9c 01       	movw	r18, r24
	{
		OSExitAtomic(sreg);
		return;
	}
			
	while(iter != q->tail && !flag)
     850:	02 17       	cp	r16, r18
     852:	13 07       	cpc	r17, r19
     854:	21 f0       	breq	.+8      	; 0x85e <_Z7prioEnqiP2tcP2tq+0xb0>
     856:	ee 23       	and	r30, r30
     858:	01 f3       	breq	.-64     	; 0x81a <_Z7prioEnqiP2tcP2tq+0x6c>
     85a:	f9 01       	movw	r30, r18
     85c:	04 c0       	rjmp	.+8      	; 0x866 <_Z7prioEnqiP2tcP2tq+0xb8>
			iter=(iter+1) % q->len;
	}
		

	// If we have found our spot, shift the rest down and insert. Otherwise insert at the end
	if(flag)
     85e:	ee 23       	and	r30, r30
     860:	09 f4       	brne	.+2      	; 0x864 <_Z7prioEnqiP2tcP2tq+0xb6>
     862:	62 c0       	rjmp	.+196    	; 0x928 <__stack+0x29>
     864:	f9 01       	movw	r30, r18
	{
		if(q->tail > q->head)
     866:	27 14       	cp	r2, r7
     868:	30 f5       	brcc	.+76     	; 0x8b6 <_Z7prioEnqiP2tcP2tq+0x108>
			for(i=q->tail-1; i>=iter && i != 255; i--)
     86a:	4f ef       	ldi	r20, 0xFF	; 255
     86c:	47 0d       	add	r20, r7
     86e:	64 2f       	mov	r22, r20
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	6e 17       	cp	r22, r30
     874:	7f 07       	cpc	r23, r31
     876:	08 f4       	brcc	.+2      	; 0x87a <_Z7prioEnqiP2tcP2tq+0xcc>
     878:	52 c0       	rjmp	.+164    	; 0x91e <__stack+0x1f>
     87a:	4f 3f       	cpi	r20, 0xFF	; 255
     87c:	09 f4       	brne	.+2      	; 0x880 <_Z7prioEnqiP2tcP2tq+0xd2>
     87e:	51 c0       	rjmp	.+162    	; 0x922 <__stack+0x23>
				q->qptr[(i+1)%q->len]=q->qptr[i];
     880:	08 81       	ld	r16, Y
     882:	19 81       	ldd	r17, Y+1	; 0x01
     884:	d8 01       	movw	r26, r16
     886:	a6 0f       	add	r26, r22
     888:	b7 1f       	adc	r27, r23
     88a:	fc 90       	ld	r15, X
     88c:	84 2f       	mov	r24, r20
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	6c 81       	ldd	r22, Y+4	; 0x04
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divmodhi4>
     89a:	d8 01       	movw	r26, r16
     89c:	a8 0f       	add	r26, r24
     89e:	b9 1f       	adc	r27, r25
     8a0:	fc 92       	st	X, r15

	// If we have found our spot, shift the rest down and insert. Otherwise insert at the end
	if(flag)
	{
		if(q->tail > q->head)
			for(i=q->tail-1; i>=iter && i != 255; i--)
     8a2:	41 50       	subi	r20, 0x01	; 1
     8a4:	64 2f       	mov	r22, r20
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	6e 17       	cp	r22, r30
     8aa:	7f 07       	cpc	r23, r31
     8ac:	e0 f1       	brcs	.+120    	; 0x926 <__stack+0x27>
     8ae:	4f 3f       	cpi	r20, 0xFF	; 255
     8b0:	39 f7       	brne	.-50     	; 0x880 <_Z7prioEnqiP2tcP2tq+0xd2>
     8b2:	89 01       	movw	r16, r18
     8b4:	39 c0       	rjmp	.+114    	; 0x928 <__stack+0x29>
				q->qptr[(i+1)%q->len]=q->qptr[i];
		else
		{
				for(i=(q->tail > 0 ? q->tail-1 : q->len-1); i!=iter; i=(i>0 ? i-1 : q->len-1))
     8b6:	77 20       	and	r7, r7
     8b8:	19 f0       	breq	.+6      	; 0x8c0 <_Z7prioEnqiP2tcP2tq+0x112>
     8ba:	4f ef       	ldi	r20, 0xFF	; 255
     8bc:	47 0d       	add	r20, r7
     8be:	19 c0       	rjmp	.+50     	; 0x8f2 <_Z7prioEnqiP2tcP2tq+0x144>
     8c0:	41 50       	subi	r20, 0x01	; 1
     8c2:	17 c0       	rjmp	.+46     	; 0x8f2 <_Z7prioEnqiP2tcP2tq+0x144>
					q->qptr[(i+1)%q->len]=q->qptr[i];
     8c4:	08 81       	ld	r16, Y
     8c6:	19 81       	ldd	r17, Y+1	; 0x01
     8c8:	d8 01       	movw	r26, r16
     8ca:	a6 0f       	add	r26, r22
     8cc:	b7 1f       	adc	r27, r23
     8ce:	fc 90       	ld	r15, X
     8d0:	84 2f       	mov	r24, r20
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	6c 81       	ldd	r22, Y+4	; 0x04
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divmodhi4>
     8de:	d8 01       	movw	r26, r16
     8e0:	a8 0f       	add	r26, r24
     8e2:	b9 1f       	adc	r27, r25
     8e4:	fc 92       	st	X, r15
		if(q->tail > q->head)
			for(i=q->tail-1; i>=iter && i != 255; i--)
				q->qptr[(i+1)%q->len]=q->qptr[i];
		else
		{
				for(i=(q->tail > 0 ? q->tail-1 : q->len-1); i!=iter; i=(i>0 ? i-1 : q->len-1))
     8e6:	44 23       	and	r20, r20
     8e8:	11 f0       	breq	.+4      	; 0x8ee <_Z7prioEnqiP2tcP2tq+0x140>
     8ea:	41 50       	subi	r20, 0x01	; 1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <_Z7prioEnqiP2tcP2tq+0x144>
     8ee:	4c 81       	ldd	r20, Y+4	; 0x04
     8f0:	41 50       	subi	r20, 0x01	; 1
     8f2:	64 2f       	mov	r22, r20
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	6e 17       	cp	r22, r30
     8f8:	7f 07       	cpc	r23, r31
     8fa:	21 f7       	brne	.-56     	; 0x8c4 <_Z7prioEnqiP2tcP2tq+0x116>
					q->qptr[(i+1)%q->len]=q->qptr[i];

				// Last case
				q->qptr[(i+1)%q->len]=q->qptr[i];
     8fc:	e8 81       	ld	r30, Y
     8fe:	f9 81       	ldd	r31, Y+1	; 0x01
     900:	df 01       	movw	r26, r30
     902:	a2 0f       	add	r26, r18
     904:	b3 1f       	adc	r27, r19
     906:	1c 91       	ld	r17, X
     908:	cb 01       	movw	r24, r22
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	6c 81       	ldd	r22, Y+4	; 0x04
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divmodhi4>
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	10 83       	st	Z, r17
		if(q->tail > q->head)
			for(i=q->tail-1; i>=iter && i != 255; i--)
				q->qptr[(i+1)%q->len]=q->qptr[i];
		else
		{
				for(i=(q->tail > 0 ? q->tail-1 : q->len-1); i!=iter; i=(i>0 ? i-1 : q->len-1))
     91a:	89 01       	movw	r16, r18
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x29>

	// If we have found our spot, shift the rest down and insert. Otherwise insert at the end
	if(flag)
	{
		if(q->tail > q->head)
			for(i=q->tail-1; i>=iter && i != 255; i--)
     91e:	89 01       	movw	r16, r18
     920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0x29>
     922:	89 01       	movw	r16, r18
     924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0x29>
     926:	89 01       	movw	r16, r18
		}
	}
	else
		iter=q->tail;
		
	q->tail=(q->tail+1)%q->len;
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	6c 81       	ldd	r22, Y+4	; 0x04
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divmodhi4>
     936:	8b 83       	std	Y+3, r24	; 0x03
	q->qptr[iter]=pid;
     938:	88 81       	ld	r24, Y
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	fc 01       	movw	r30, r24
     93e:	e0 0f       	add	r30, r16
     940:	f1 1f       	adc	r31, r17
     942:	a0 82       	st	Z, r10
	q->ctr++;
     944:	8d 81       	ldd	r24, Y+5	; 0x05
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	8d 83       	std	Y+5, r24	; 0x05
	OSExitAtomic(sreg);
     94a:	3f be       	out	0x3f, r3	; 63
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	6f 90       	pop	r6
     968:	5f 90       	pop	r5
     96a:	4f 90       	pop	r4
     96c:	3f 90       	pop	r3
     96e:	2f 90       	pop	r2
     970:	08 95       	ret

00000972 <_Z7procEnqiP2tcP2tq>:

void procEnq(int pid, tTCB *tasklist, tQueue *q)
{
		prioEnq(pid, tasklist, q);
     972:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z7prioEnqiP2tcP2tq>
     976:	08 95       	ret

00000978 <_Z8procPeekP2tq>:
}

unsigned char procPeek(tQueue *q)
{
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     978:	2f b7       	in	r18, 0x3f	; 63
     97a:	f8 94       	cli
	if(!q->ctr)
     97c:	dc 01       	movw	r26, r24
     97e:	15 96       	adiw	r26, 0x05	; 5
     980:	3c 91       	ld	r19, X
     982:	31 11       	cpse	r19, r1
     984:	03 c0       	rjmp	.+6      	; 0x98c <_Z8procPeekP2tq+0x14>
	{
		OSExitAtomic(sreg);
     986:	2f bf       	out	0x3f, r18	; 63
		return 255;
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	08 95       	ret
	}
	else
	{
		OSExitAtomic(sreg);
     98c:	2f bf       	out	0x3f, r18	; 63
		return q->qptr[q->head];
     98e:	fc 01       	movw	r30, r24
     990:	22 81       	ldd	r18, Z+2	; 0x02
     992:	01 90       	ld	r0, Z+
     994:	f0 81       	ld	r31, Z
     996:	e0 2d       	mov	r30, r0
     998:	e2 0f       	add	r30, r18
     99a:	f1 1d       	adc	r31, r1
     99c:	80 81       	ld	r24, Z
	}
}
     99e:	08 95       	ret

000009a0 <_Z7procDeqP2tq>:

unsigned char procDeq(tQueue *q)
{
     9a0:	cf 93       	push	r28
     9a2:	fc 01       	movw	r30, r24
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     9a4:	cf b7       	in	r28, 0x3f	; 63
     9a6:	f8 94       	cli
	unsigned char ret=255;
	if(q->ctr>0)
     9a8:	25 81       	ldd	r18, Z+5	; 0x05
     9aa:	22 23       	and	r18, r18
     9ac:	89 f0       	breq	.+34     	; 0x9d0 <_Z7procDeqP2tq+0x30>
	{
		ret=q->qptr[q->head];
     9ae:	42 81       	ldd	r20, Z+2	; 0x02
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	a0 81       	ld	r26, Z
     9b4:	b1 81       	ldd	r27, Z+1	; 0x01
     9b6:	a4 0f       	add	r26, r20
     9b8:	b5 1f       	adc	r27, r21
     9ba:	3c 91       	ld	r19, X
		q->head=(q->head+1)%q->len;
     9bc:	ca 01       	movw	r24, r20
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	64 81       	ldd	r22, Z+4	; 0x04
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__divmodhi4>
     9c8:	82 83       	std	Z+2, r24	; 0x02
		q->ctr--;
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	25 83       	std	Z+5, r18	; 0x05
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <_Z7procDeqP2tq+0x32>

unsigned char procDeq(tQueue *q)
{
	unsigned char sreg;
	OSMakeAtomic(&sreg);
	unsigned char ret=255;
     9d0:	3f ef       	ldi	r19, 0xFF	; 255
	{
		ret=q->qptr[q->head];
		q->head=(q->head+1)%q->len;
		q->ctr--;
	}
	OSExitAtomic(sreg);
     9d2:	cf bf       	out	0x3f, r28	; 63
	return ret;
}
     9d4:	83 2f       	mov	r24, r19
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <_Z5initQPhhP2tq>:

void initQ(unsigned char *qbuf, unsigned char len, tQueue *q)
{
     9da:	da 01       	movw	r26, r20
	unsigned char sreg;
	OSMakeAtomic(&sreg);
     9dc:	3f b7       	in	r19, 0x3f	; 63
     9de:	f8 94       	cli

	unsigned char i;
		
	q->head=0;
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	1c 92       	st	X, r1
     9e4:	12 97       	sbiw	r26, 0x02	; 2
	q->tail=0;
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	1c 92       	st	X, r1
     9ea:	13 97       	sbiw	r26, 0x03	; 3
	q->qptr=qbuf;
     9ec:	11 96       	adiw	r26, 0x01	; 1
     9ee:	9c 93       	st	X, r25
     9f0:	8e 93       	st	-X, r24
	q->len=len;
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	6c 93       	st	X, r22
     9f6:	14 97       	sbiw	r26, 0x04	; 4
	q->ctr=0;
     9f8:	15 96       	adiw	r26, 0x05	; 5
     9fa:	1c 92       	st	X, r1
     9fc:	15 97       	sbiw	r26, 0x05	; 5

	for(i=0; i<len; i++)
     9fe:	66 23       	and	r22, r22
     a00:	61 f0       	breq	.+24     	; 0xa1a <_Z5initQPhhP2tq+0x40>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
		q->qptr[i]=255;
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	e8 0f       	add	r30, r24
     a10:	f9 1f       	adc	r31, r25
     a12:	20 83       	st	Z, r18
     a14:	01 96       	adiw	r24, 0x01	; 1
	q->tail=0;
	q->qptr=qbuf;
	q->len=len;
	q->ctr=0;

	for(i=0; i<len; i++)
     a16:	86 17       	cp	r24, r22
     a18:	b8 f3       	brcs	.-18     	; 0xa08 <_Z5initQPhhP2tq+0x2e>
		q->qptr[i]=255;
	OSExitAtomic(sreg);
     a1a:	3f bf       	out	0x3f, r19	; 63
     a1c:	08 95       	ret

00000a1e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a1e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a20:	91 8d       	ldd	r25, Z+25	; 0x19
     a22:	22 8d       	ldd	r18, Z+26	; 0x1a
     a24:	89 2f       	mov	r24, r25
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	80 5c       	subi	r24, 0xC0	; 192
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	82 1b       	sub	r24, r18
     a2e:	91 09       	sbc	r25, r1
}
     a30:	8f 73       	andi	r24, 0x3F	; 63
     a32:	99 27       	eor	r25, r25
     a34:	08 95       	ret

00000a36 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a36:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a38:	91 8d       	ldd	r25, Z+25	; 0x19
     a3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a3c:	98 17       	cp	r25, r24
     a3e:	31 f0       	breq	.+12     	; 0xa4c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a40:	82 8d       	ldd	r24, Z+26	; 0x1a
     a42:	e8 0f       	add	r30, r24
     a44:	f1 1d       	adc	r31, r1
     a46:	85 8d       	ldd	r24, Z+29	; 0x1d
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a50:	08 95       	ret

00000a52 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a52:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a54:	91 8d       	ldd	r25, Z+25	; 0x19
     a56:	82 8d       	ldd	r24, Z+26	; 0x1a
     a58:	98 17       	cp	r25, r24
     a5a:	61 f0       	breq	.+24     	; 0xa74 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5e:	df 01       	movw	r26, r30
     a60:	a8 0f       	add	r26, r24
     a62:	b1 1d       	adc	r27, r1
     a64:	5d 96       	adiw	r26, 0x1d	; 29
     a66:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a68:	92 8d       	ldd	r25, Z+26	; 0x1a
     a6a:	9f 5f       	subi	r25, 0xFF	; 255
     a6c:	9f 73       	andi	r25, 0x3F	; 63
     a6e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a78:	08 95       	ret

00000a7a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a7a:	8d ea       	ldi	r24, 0xAD	; 173
     a7c:	96 e0       	ldi	r25, 0x06	; 6
     a7e:	89 2b       	or	r24, r25
     a80:	49 f0       	breq	.+18     	; 0xa94 <_Z14serialEventRunv+0x1a>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	89 2b       	or	r24, r25
     a88:	29 f0       	breq	.+10     	; 0xa94 <_Z14serialEventRunv+0x1a>
     a8a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_Z17Serial0_availablev>
     a8e:	81 11       	cpse	r24, r1
     a90:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a94:	08 95       	ret

00000a96 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a96:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a98:	84 8d       	ldd	r24, Z+28	; 0x1c
     a9a:	df 01       	movw	r26, r30
     a9c:	a8 0f       	add	r26, r24
     a9e:	b1 1d       	adc	r27, r1
     aa0:	a3 5a       	subi	r26, 0xA3	; 163
     aa2:	bf 4f       	sbci	r27, 0xFF	; 255
     aa4:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     aa6:	24 8d       	ldd	r18, Z+28	; 0x1c
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	2f 5f       	subi	r18, 0xFF	; 255
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	2f 73       	andi	r18, 0x3F	; 63
     ab0:	30 78       	andi	r19, 0x80	; 128
     ab2:	33 23       	and	r19, r19
     ab4:	34 f4       	brge	.+12     	; 0xac2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     ab6:	21 50       	subi	r18, 0x01	; 1
     ab8:	31 09       	sbc	r19, r1
     aba:	20 6c       	ori	r18, 0xC0	; 192
     abc:	3f 6f       	ori	r19, 0xFF	; 255
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     ac4:	a6 89       	ldd	r26, Z+22	; 0x16
     ac6:	b7 89       	ldd	r27, Z+23	; 0x17
     ac8:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     aca:	a0 89       	ldd	r26, Z+16	; 0x10
     acc:	b1 89       	ldd	r27, Z+17	; 0x11
     ace:	8c 91       	ld	r24, X
     ad0:	80 64       	ori	r24, 0x40	; 64
     ad2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     ad4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ad6:	84 8d       	ldd	r24, Z+28	; 0x1c
     ad8:	98 13       	cpse	r25, r24
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     adc:	02 88       	ldd	r0, Z+18	; 0x12
     ade:	f3 89       	ldd	r31, Z+19	; 0x13
     ae0:	e0 2d       	mov	r30, r0
     ae2:	80 81       	ld	r24, Z
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	80 83       	st	Z, r24
     ae8:	08 95       	ret

00000aea <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     af0:	88 8d       	ldd	r24, Y+24	; 0x18
     af2:	81 11       	cpse	r24, r1
     af4:	0f c0       	rjmp	.+30     	; 0xb14 <_ZN14HardwareSerial5flushEv+0x2a>
     af6:	18 c0       	rjmp	.+48     	; 0xb28 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	07 fc       	sbrc	r0, 7
     afc:	0d c0       	rjmp	.+26     	; 0xb18 <_ZN14HardwareSerial5flushEv+0x2e>
     afe:	90 81       	ld	r25, Z
     b00:	95 ff       	sbrs	r25, 5
     b02:	0a c0       	rjmp	.+20     	; 0xb18 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b04:	a8 89       	ldd	r26, Y+16	; 0x10
     b06:	b9 89       	ldd	r27, Y+17	; 0x11
     b08:	8c 91       	ld	r24, X
     b0a:	85 ff       	sbrs	r24, 5
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     b0e:	ce 01       	movw	r24, r28
     b10:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b14:	ea 89       	ldd	r30, Y+18	; 0x12
     b16:	fb 89       	ldd	r31, Y+19	; 0x13
     b18:	90 81       	ld	r25, Z
     b1a:	95 fd       	sbrc	r25, 5
     b1c:	ed cf       	rjmp	.-38     	; 0xaf8 <_ZN14HardwareSerial5flushEv+0xe>
     b1e:	a8 89       	ldd	r26, Y+16	; 0x10
     b20:	b9 89       	ldd	r27, Y+17	; 0x11
     b22:	8c 91       	ld	r24, X
     b24:	86 ff       	sbrs	r24, 6
     b26:	e8 cf       	rjmp	.-48     	; 0xaf8 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	fc 01       	movw	r30, r24
  _written = true;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b3c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b3e:	84 8d       	ldd	r24, Z+28	; 0x1c
     b40:	98 13       	cpse	r25, r24
     b42:	22 c0       	rjmp	.+68     	; 0xb88 <_ZN14HardwareSerial5writeEh+0x5a>
     b44:	a0 89       	ldd	r26, Z+16	; 0x10
     b46:	b1 89       	ldd	r27, Z+17	; 0x11
     b48:	8c 91       	ld	r24, X
     b4a:	85 fd       	sbrc	r24, 5
     b4c:	2f c0       	rjmp	.+94     	; 0xbac <_ZN14HardwareSerial5writeEh+0x7e>
     b4e:	1c c0       	rjmp	.+56     	; 0xb88 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	07 fc       	sbrc	r0, 7
     b54:	08 c0       	rjmp	.+16     	; 0xb66 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b56:	e8 89       	ldd	r30, Y+16	; 0x10
     b58:	f9 89       	ldd	r31, Y+17	; 0x11
     b5a:	80 81       	ld	r24, Z
     b5c:	85 ff       	sbrs	r24, 5
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
     b60:	ce 01       	movw	r24, r28
     b62:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b68:	09 17       	cp	r16, r25
     b6a:	91 f3       	breq	.-28     	; 0xb50 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b6e:	fe 01       	movw	r30, r28
     b70:	e8 0f       	add	r30, r24
     b72:	f1 1d       	adc	r31, r1
     b74:	e3 5a       	subi	r30, 0xA3	; 163
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     b7a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b7c:	ea 89       	ldd	r30, Y+18	; 0x12
     b7e:	fb 89       	ldd	r31, Y+19	; 0x13
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	80 83       	st	Z, r24
  
  return 1;
     b86:	1b c0       	rjmp	.+54     	; 0xbbe <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b88:	23 8d       	ldd	r18, Z+27	; 0x1b
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	2f 73       	andi	r18, 0x3F	; 63
     b92:	30 78       	andi	r19, 0x80	; 128
     b94:	33 23       	and	r19, r19
     b96:	34 f4       	brge	.+12     	; 0xba4 <_ZN14HardwareSerial5writeEh+0x76>
     b98:	21 50       	subi	r18, 0x01	; 1
     b9a:	31 09       	sbc	r19, r1
     b9c:	20 6c       	ori	r18, 0xC0	; 192
     b9e:	3f 6f       	ori	r19, 0xFF	; 255
     ba0:	2f 5f       	subi	r18, 0xFF	; 255
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	16 2f       	mov	r17, r22
     ba6:	ef 01       	movw	r28, r30
     ba8:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     baa:	dd cf       	rjmp	.-70     	; 0xb66 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     bac:	a6 89       	ldd	r26, Z+22	; 0x16
     bae:	b7 89       	ldd	r27, Z+23	; 0x17
     bb0:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     bb2:	00 88       	ldd	r0, Z+16	; 0x10
     bb4:	f1 89       	ldd	r31, Z+17	; 0x11
     bb6:	e0 2d       	mov	r30, r0
     bb8:	80 81       	ld	r24, Z
     bba:	80 64       	ori	r24, 0x40	; 64
     bbc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	6a 01       	movw	r12, r20
     be2:	7b 01       	movw	r14, r22
     be4:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     be6:	e8 89       	ldd	r30, Y+16	; 0x10
     be8:	f9 89       	ldd	r31, Y+17	; 0x11
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bee:	41 15       	cp	r20, r1
     bf0:	51 4e       	sbci	r21, 0xE1	; 225
     bf2:	61 05       	cpc	r22, r1
     bf4:	71 05       	cpc	r23, r1
     bf6:	b1 f0       	breq	.+44     	; 0xc24 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	79 e0       	ldi	r23, 0x09	; 9
     bfc:	8d e3       	ldi	r24, 0x3D	; 61
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a7 01       	movw	r20, r14
     c02:	96 01       	movw	r18, r12
     c04:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__udivmodsi4>
     c08:	89 01       	movw	r16, r18
     c0a:	9a 01       	movw	r18, r20
     c0c:	01 50       	subi	r16, 0x01	; 1
     c0e:	11 09       	sbc	r17, r1
     c10:	21 09       	sbc	r18, r1
     c12:	31 09       	sbc	r19, r1
     c14:	36 95       	lsr	r19
     c16:	27 95       	ror	r18
     c18:	17 95       	ror	r17
     c1a:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c1c:	01 15       	cp	r16, r1
     c1e:	80 e1       	ldi	r24, 0x10	; 16
     c20:	18 07       	cpc	r17, r24
     c22:	a8 f0       	brcs	.+42     	; 0xc4e <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     c24:	e8 89       	ldd	r30, Y+16	; 0x10
     c26:	f9 89       	ldd	r31, Y+17	; 0x11
     c28:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c2a:	60 e8       	ldi	r22, 0x80	; 128
     c2c:	74 e8       	ldi	r23, 0x84	; 132
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a7 01       	movw	r20, r14
     c34:	96 01       	movw	r18, r12
     c36:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__udivmodsi4>
     c3a:	da 01       	movw	r26, r20
     c3c:	c9 01       	movw	r24, r18
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	b6 95       	lsr	r27
     c46:	a7 95       	ror	r26
     c48:	97 95       	ror	r25
     c4a:	87 95       	ror	r24
     c4c:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c4e:	ec 85       	ldd	r30, Y+12	; 0x0c
     c50:	fd 85       	ldd	r31, Y+13	; 0x0d
     c52:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     c54:	ee 85       	ldd	r30, Y+14	; 0x0e
     c56:	ff 85       	ldd	r31, Y+15	; 0x0f
     c58:	00 83       	st	Z, r16

  _written = false;
     c5a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c5c:	ec 89       	ldd	r30, Y+20	; 0x14
     c5e:	fd 89       	ldd	r31, Y+21	; 0x15
     c60:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     c62:	ea 89       	ldd	r30, Y+18	; 0x12
     c64:	fb 89       	ldd	r31, Y+19	; 0x13
     c66:	80 81       	ld	r24, Z
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c6c:	ea 89       	ldd	r30, Y+18	; 0x12
     c6e:	fb 89       	ldd	r31, Y+19	; 0x13
     c70:	80 81       	ld	r24, Z
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c76:	ea 89       	ldd	r30, Y+18	; 0x12
     c78:	fb 89       	ldd	r31, Y+19	; 0x13
     c7a:	80 81       	ld	r24, Z
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c80:	ea 89       	ldd	r30, Y+18	; 0x12
     c82:	fb 89       	ldd	r31, Y+19	; 0x13
     c84:	80 81       	ld	r24, Z
     c86:	8f 7d       	andi	r24, 0xDF	; 223
     c88:	80 83       	st	Z, r24
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	08 95       	ret

00000c9e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     cb6:	e0 91 fa 01 	lds	r30, 0x01FA
     cba:	f0 91 fb 01 	lds	r31, 0x01FB
     cbe:	80 81       	ld	r24, Z
     cc0:	82 fd       	sbrc	r24, 2
     cc2:	14 c0       	rjmp	.+40     	; 0xcec <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     cc4:	ea ee       	ldi	r30, 0xEA	; 234
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	a6 89       	ldd	r26, Z+22	; 0x16
     cca:	b7 89       	ldd	r27, Z+23	; 0x17
     ccc:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     cce:	81 8d       	ldd	r24, Z+25	; 0x19
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     cd4:	92 8d       	ldd	r25, Z+26	; 0x1a
     cd6:	89 17       	cp	r24, r25
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     cda:	df 01       	movw	r26, r30
     cdc:	e1 8d       	ldd	r30, Z+25	; 0x19
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	e6 51       	subi	r30, 0x16	; 22
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     ce6:	59 96       	adiw	r26, 0x19	; 25
     ce8:	8c 93       	st	X, r24
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cec:	e0 91 00 02 	lds	r30, 0x0200
     cf0:	f0 91 01 02 	lds	r31, 0x0201
     cf4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d30:	8a ee       	ldi	r24, 0xEA	; 234
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	bf 91       	pop	r27
     d3e:	af 91       	pop	r26
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	7f 91       	pop	r23
     d46:	6f 91       	pop	r22
     d48:	5f 91       	pop	r21
     d4a:	4f 91       	pop	r20
     d4c:	3f 91       	pop	r19
     d4e:	2f 91       	pop	r18
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d5a:	8a ee       	ldi	r24, 0xEA	; 234
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN14HardwareSerial9availableEv>
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	89 2b       	or	r24, r25
     d66:	09 f4       	brne	.+2      	; 0xd6a <_Z17Serial0_availablev+0x10>
     d68:	20 e0       	ldi	r18, 0x00	; 0
}
     d6a:	82 2f       	mov	r24, r18
     d6c:	08 95       	ret

00000d6e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d6e:	ea ee       	ldi	r30, 0xEA	; 234
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	13 82       	std	Z+3, r1	; 0x03
     d74:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d76:	88 ee       	ldi	r24, 0xE8	; 232
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	84 83       	std	Z+4, r24	; 0x04
     d80:	95 83       	std	Z+5, r25	; 0x05
     d82:	a6 83       	std	Z+6, r26	; 0x06
     d84:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d86:	86 e1       	ldi	r24, 0x16	; 22
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	85 ec       	ldi	r24, 0xC5	; 197
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	95 87       	std	Z+13, r25	; 0x0d
     d94:	84 87       	std	Z+12, r24	; 0x0c
     d96:	84 ec       	ldi	r24, 0xC4	; 196
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	97 87       	std	Z+15, r25	; 0x0f
     d9c:	86 87       	std	Z+14, r24	; 0x0e
     d9e:	80 ec       	ldi	r24, 0xC0	; 192
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	91 8b       	std	Z+17, r25	; 0x11
     da4:	80 8b       	std	Z+16, r24	; 0x10
     da6:	81 ec       	ldi	r24, 0xC1	; 193
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	93 8b       	std	Z+19, r25	; 0x13
     dac:	82 8b       	std	Z+18, r24	; 0x12
     dae:	82 ec       	ldi	r24, 0xC2	; 194
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	95 8b       	std	Z+21, r25	; 0x15
     db4:	84 8b       	std	Z+20, r24	; 0x14
     db6:	86 ec       	ldi	r24, 0xC6	; 198
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	97 8b       	std	Z+23, r25	; 0x17
     dbc:	86 8b       	std	Z+22, r24	; 0x16
     dbe:	11 8e       	std	Z+25, r1	; 0x19
     dc0:	12 8e       	std	Z+26, r1	; 0x1a
     dc2:	13 8e       	std	Z+27, r1	; 0x1b
     dc4:	14 8e       	std	Z+28, r1	; 0x1c
     dc6:	08 95       	ret

00000dc8 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	5c 01       	movw	r10, r24
     de2:	7b 01       	movw	r14, r22
     de4:	4c 01       	movw	r8, r24
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	88 0e       	add	r8, r24
     dea:	91 1c       	adc	r9, r1
     dec:	65 01       	movw	r12, r10
     dee:	e5 e0       	ldi	r30, 0x05	; 5
     df0:	ce 0e       	add	r12, r30
     df2:	d1 1c       	adc	r13, r1
    size_t n = 0;
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     df8:	f4 01       	movw	r30, r8
     dfa:	61 91       	ld	r22, Z+
     dfc:	4f 01       	movw	r8, r30
     dfe:	4a e0       	ldi	r20, 0x0A	; 10
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	c7 01       	movw	r24, r14
     e04:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEhi>
     e08:	ec 01       	movw	r28, r24
        n += p.print('.');
     e0a:	6e e2       	ldi	r22, 0x2E	; 46
     e0c:	c7 01       	movw	r24, r14
     e0e:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN5Print5printEc>
     e12:	8c 0f       	add	r24, r28
     e14:	9d 1f       	adc	r25, r29
     e16:	08 0f       	add	r16, r24
     e18:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     e1a:	8c 14       	cp	r8, r12
     e1c:	9d 04       	cpc	r9, r13
     e1e:	61 f7       	brne	.-40     	; 0xdf8 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     e20:	4a e0       	ldi	r20, 0x0A	; 10
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	f5 01       	movw	r30, r10
     e26:	65 81       	ldd	r22, Z+5	; 0x05
     e28:	c7 01       	movw	r24, r14
     e2a:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEhi>
    return n;
}
     e2e:	80 0f       	add	r24, r16
     e30:	91 1f       	adc	r25, r17
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	08 95       	ret

00000e4c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     e4c:	e7 e8       	ldi	r30, 0x87	; 135
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	86 e2       	ldi	r24, 0x26	; 38
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     e58:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     e5a:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     e5c:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     e5e:	15 82       	std	Z+5, r1	; 0x05
     e60:	08 95       	ret

00000e62 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     e62:	08 95       	ret

00000e64 <main>:

int main(void)
{
	init();
     e64:	0e 94 92 09 	call	0x1324	; 0x1324 <init>

	initVariant();
     e68:	0e 94 31 07 	call	0xe62	; 0xe62 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e6c:	0e 94 9f 0a 	call	0x153e	; 0x153e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e70:	cd e3       	ldi	r28, 0x3D	; 61
     e72:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e74:	0e 94 cb 0a 	call	0x1596	; 0x1596 <loop>
		if (serialEventRun) serialEventRun();
     e78:	20 97       	sbiw	r28, 0x00	; 0
     e7a:	e1 f3       	breq	.-8      	; 0xe74 <main+0x10>
     e7c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_Z14serialEventRunv>
     e80:	f9 cf       	rjmp	.-14     	; 0xe74 <main+0x10>

00000e82 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     e92:	41 15       	cp	r20, r1
     e94:	51 05       	cpc	r21, r1
     e96:	b1 f0       	breq	.+44     	; 0xec4 <_ZN5Print5writeEPKhj+0x42>
     e98:	8c 01       	movw	r16, r24
     e9a:	e6 2e       	mov	r14, r22
     e9c:	f7 2e       	mov	r15, r23
     e9e:	ea 01       	movw	r28, r20
     ea0:	c1 2c       	mov	r12, r1
     ea2:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     ea4:	d7 01       	movw	r26, r14
     ea6:	6d 91       	ld	r22, X+
     ea8:	7d 01       	movw	r14, r26
     eaa:	d8 01       	movw	r26, r16
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	c8 01       	movw	r24, r16
     eb8:	09 95       	icall
     eba:	c8 0e       	add	r12, r24
     ebc:	d9 1e       	adc	r13, r25
     ebe:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     ec0:	89 f7       	brne	.-30     	; 0xea4 <_ZN5Print5writeEPKhj+0x22>
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     ec4:	c1 2c       	mov	r12, r1
     ec6:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     ec8:	c6 01       	movw	r24, r12
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	08 95       	ret

00000edc <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     edc:	61 15       	cp	r22, r1
     ede:	71 05       	cpc	r23, r1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     ee2:	fb 01       	movw	r30, r22
     ee4:	01 90       	ld	r0, Z+
     ee6:	00 20       	and	r0, r0
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <_ZN5Print5printEPKc+0x8>
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	af 01       	movw	r20, r30
     eee:	46 1b       	sub	r20, r22
     ef0:	57 0b       	sbc	r21, r23
     ef2:	dc 01       	movw	r26, r24
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	02 80       	ldd	r0, Z+2	; 0x02
     efa:	f3 81       	ldd	r31, Z+3	; 0x03
     efc:	e0 2d       	mov	r30, r0
     efe:	09 95       	icall
     f00:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
     f06:	08 95       	ret

00000f08 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
     f08:	dc 01       	movw	r26, r24
     f0a:	ed 91       	ld	r30, X+
     f0c:	fc 91       	ld	r31, X
     f0e:	01 90       	ld	r0, Z+
     f10:	f0 81       	ld	r31, Z
     f12:	e0 2d       	mov	r30, r0
     f14:	09 95       	icall
}
     f16:	08 95       	ret

00000f18 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
     f18:	dc 01       	movw	r26, r24
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	02 80       	ldd	r0, Z+2	; 0x02
     f20:	f3 81       	ldd	r31, Z+3	; 0x03
     f22:	e0 2d       	mov	r30, r0
     f24:	42 e0       	ldi	r20, 0x02	; 2
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	68 e2       	ldi	r22, 0x28	; 40
     f2a:	71 e0       	ldi	r23, 0x01	; 1
     f2c:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
     f2e:	08 95       	ret

00000f30 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     f30:	4f 92       	push	r4
     f32:	5f 92       	push	r5
     f34:	6f 92       	push	r6
     f36:	7f 92       	push	r7
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	a1 97       	sbiw	r28, 0x21	; 33
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	5c 01       	movw	r10, r24
     f60:	6a 01       	movw	r12, r20
     f62:	7b 01       	movw	r14, r22
     f64:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     f66:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	82 17       	cp	r24, r18
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <_ZN5Print11printNumberEmh+0x46>
     f6e:	0f 2e       	mov	r0, r31
     f70:	fa e0       	ldi	r31, 0x0A	; 10
     f72:	9f 2e       	mov	r9, r31
     f74:	f0 2d       	mov	r31, r0
     f76:	8e 01       	movw	r16, r28
     f78:	0f 5d       	subi	r16, 0xDF	; 223
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     f7c:	49 2c       	mov	r4, r9
     f7e:	51 2c       	mov	r5, r1
     f80:	61 2c       	mov	r6, r1
     f82:	71 2c       	mov	r7, r1
     f84:	c7 01       	movw	r24, r14
     f86:	b6 01       	movw	r22, r12
     f88:	a3 01       	movw	r20, r6
     f8a:	92 01       	movw	r18, r4
     f8c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__udivmodsi4>
    char c = m - base * n;
     f90:	8c 2d       	mov	r24, r12
     f92:	92 9e       	mul	r9, r18
     f94:	80 19       	sub	r24, r0
     f96:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     f98:	01 50       	subi	r16, 0x01	; 1
     f9a:	11 09       	sbc	r17, r1
     f9c:	8a 30       	cpi	r24, 0x0A	; 10
     f9e:	10 f4       	brcc	.+4      	; 0xfa4 <_ZN5Print11printNumberEmh+0x74>
     fa0:	80 5d       	subi	r24, 0xD0	; 208
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <_ZN5Print11printNumberEmh+0x76>
     fa4:	89 5c       	subi	r24, 0xC9	; 201
     fa6:	d8 01       	movw	r26, r16
     fa8:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     faa:	c2 2e       	mov	r12, r18
     fac:	d3 2e       	mov	r13, r19
     fae:	e4 2e       	mov	r14, r20
     fb0:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     fb2:	c1 14       	cp	r12, r1
     fb4:	d1 04       	cpc	r13, r1
     fb6:	e1 04       	cpc	r14, r1
     fb8:	f1 04       	cpc	r15, r1
     fba:	21 f7       	brne	.-56     	; 0xf84 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fbc:	01 15       	cp	r16, r1
     fbe:	11 05       	cpc	r17, r1
     fc0:	91 f0       	breq	.+36     	; 0xfe6 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
     fc2:	f8 01       	movw	r30, r16
     fc4:	01 90       	ld	r0, Z+
     fc6:	00 20       	and	r0, r0
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <_ZN5Print11printNumberEmh+0x94>
     fca:	31 97       	sbiw	r30, 0x01	; 1
     fcc:	af 01       	movw	r20, r30
     fce:	40 1b       	sub	r20, r16
     fd0:	51 0b       	sbc	r21, r17
     fd2:	d5 01       	movw	r26, r10
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	02 80       	ldd	r0, Z+2	; 0x02
     fda:	f3 81       	ldd	r31, Z+3	; 0x03
     fdc:	e0 2d       	mov	r30, r0
     fde:	b8 01       	movw	r22, r16
     fe0:	c5 01       	movw	r24, r10
     fe2:	09 95       	icall
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     fea:	a1 96       	adiw	r28, 0x21	; 33
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	7f 90       	pop	r7
    100e:	6f 90       	pop	r6
    1010:	5f 90       	pop	r5
    1012:	4f 90       	pop	r4
    1014:	08 95       	ret

00001016 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	49 f4       	brne	.+18     	; 0x102e <_ZN5Print5printEmi+0x18>
    101c:	dc 01       	movw	r26, r24
    101e:	ed 91       	ld	r30, X+
    1020:	fc 91       	ld	r31, X
    1022:	01 90       	ld	r0, Z+
    1024:	f0 81       	ld	r31, Z
    1026:	e0 2d       	mov	r30, r0
    1028:	64 2f       	mov	r22, r20
    102a:	09 95       	icall
    102c:	08 95       	ret
  else return printNumber(n, base);
    102e:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print11printNumberEmh>
}
    1032:	08 95       	ret

00001034 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1034:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1036:	46 2f       	mov	r20, r22
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN5Print5printEmi>
}
    1042:	08 95       	ret

00001044 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
    104e:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1050:	ab 01       	movw	r20, r22
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN5Print5printEmi>
    105a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    105c:	ce 01       	movw	r24, r28
    105e:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN5Print7printlnEv>
  return n;
}
    1062:	80 0f       	add	r24, r16
    1064:	91 1f       	adc	r25, r17
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	39 f0       	breq	.+14     	; 0x1082 <_Z12disableTimerh+0x12>
    1074:	18 f0       	brcs	.+6      	; 0x107c <_Z12disableTimerh+0xc>
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	51 f0       	breq	.+20     	; 0x108e <_Z12disableTimerh+0x1e>
    107a:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    107c:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1080:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1082:	ef e6       	ldi	r30, 0x6F	; 111
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	80 83       	st	Z, r24
      break;
    108c:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    108e:	e0 e7       	ldi	r30, 0x70	; 112
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8d 7f       	andi	r24, 0xFD	; 253
    1096:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    109e:	e1 eb       	ldi	r30, 0xB1	; 177
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 7f       	andi	r24, 0xF8	; 248
    10a6:	84 60       	ori	r24, 0x04	; 4
    10a8:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    10aa:	10 92 b3 00 	sts	0x00B3, r1
    10ae:	08 95       	ret

000010b0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    10b0:	cf 93       	push	r28
    10b2:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    10b4:	80 91 08 01 	lds	r24, 0x0108
    10b8:	8c 13       	cpse	r24, r28
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    10bc:	e8 e6       	ldi	r30, 0x68	; 104
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e4 91       	lpm	r30, Z
    10c2:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	90 93 08 01 	sts	0x0108, r25
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_Z6noToneh+0x1e>
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    10ce:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	8c 2f       	mov	r24, r28
    10d6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
}
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1100:	80 91 90 02 	lds	r24, 0x0290
    1104:	90 91 91 02 	lds	r25, 0x0291
    1108:	a0 91 92 02 	lds	r26, 0x0292
    110c:	b0 91 93 02 	lds	r27, 0x0293
    1110:	89 2b       	or	r24, r25
    1112:	8a 2b       	or	r24, r26
    1114:	8b 2b       	or	r24, r27
    1116:	51 f1       	breq	.+84     	; 0x116c <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1118:	80 91 8d 02 	lds	r24, 0x028D
    111c:	e0 91 8e 02 	lds	r30, 0x028E
    1120:	f0 91 8f 02 	lds	r31, 0x028F
    1124:	90 81       	ld	r25, Z
    1126:	89 27       	eor	r24, r25
    1128:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    112a:	80 91 90 02 	lds	r24, 0x0290
    112e:	90 91 91 02 	lds	r25, 0x0291
    1132:	a0 91 92 02 	lds	r26, 0x0292
    1136:	b0 91 93 02 	lds	r27, 0x0293
    113a:	18 16       	cp	r1, r24
    113c:	19 06       	cpc	r1, r25
    113e:	1a 06       	cpc	r1, r26
    1140:	1b 06       	cpc	r1, r27
    1142:	c4 f4       	brge	.+48     	; 0x1174 <__vector_7+0x96>
      timer2_toggle_count--;
    1144:	80 91 90 02 	lds	r24, 0x0290
    1148:	90 91 91 02 	lds	r25, 0x0291
    114c:	a0 91 92 02 	lds	r26, 0x0292
    1150:	b0 91 93 02 	lds	r27, 0x0293
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	a1 09       	sbc	r26, r1
    1158:	b1 09       	sbc	r27, r1
    115a:	80 93 90 02 	sts	0x0290, r24
    115e:	90 93 91 02 	sts	0x0291, r25
    1162:	a0 93 92 02 	sts	0x0292, r26
    1166:	b0 93 93 02 	sts	0x0293, r27
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    116c:	80 91 08 01 	lds	r24, 0x0108
    1170:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	00 f5       	brcc	.+64     	; 0x11da <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    119a:	e8 2f       	mov	r30, r24
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ec 56       	subi	r30, 0x6C	; 108
    11a4:	fd 4f       	sbci	r31, 0xFD	; 253
    11a6:	71 83       	std	Z+1, r23	; 0x01
    11a8:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    11aa:	88 23       	and	r24, r24
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <attachInterrupt+0x1e>
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	49 f0       	breq	.+18     	; 0x11c4 <attachInterrupt+0x2e>
    11b2:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    11b4:	e9 e6       	ldi	r30, 0x69	; 105
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8c 7f       	andi	r24, 0xFC	; 252
    11bc:	48 2b       	or	r20, r24
    11be:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    11c0:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    11c2:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    11c4:	e9 e6       	ldi	r30, 0x69	; 105
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	44 0f       	add	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	83 7f       	andi	r24, 0xF3	; 243
    11d4:	48 2b       	or	r20, r24
    11d6:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    11d8:	e9 9a       	sbi	0x1d, 1	; 29
    11da:	08 95       	ret

000011dc <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    11fe:	80 91 94 02 	lds	r24, 0x0294
    1202:	90 91 95 02 	lds	r25, 0x0295
    1206:	89 2b       	or	r24, r25
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    120a:	e0 91 94 02 	lds	r30, 0x0294
    120e:	f0 91 95 02 	lds	r31, 0x0295
    1212:	09 95       	icall
}
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_2>:

ISR(INT1_vect) {
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1258:	80 91 96 02 	lds	r24, 0x0296
    125c:	90 91 97 02 	lds	r25, 0x0297
    1260:	89 2b       	or	r24, r25
    1262:	29 f0       	breq	.+10     	; 0x126e <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1264:	e0 91 96 02 	lds	r30, 0x0296
    1268:	f0 91 97 02 	lds	r31, 0x0297
    126c:	09 95       	icall
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    12a6:	80 91 99 02 	lds	r24, 0x0299
    12aa:	90 91 9a 02 	lds	r25, 0x029A
    12ae:	a0 91 9b 02 	lds	r26, 0x029B
    12b2:	b0 91 9c 02 	lds	r27, 0x029C
	unsigned char f = timer0_fract;
    12b6:	30 91 98 02 	lds	r19, 0x0298

	m += MILLIS_INC;
	f += FRACT_INC;
    12ba:	23 e0       	ldi	r18, 0x03	; 3
    12bc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    12be:	2d 37       	cpi	r18, 0x7D	; 125
    12c0:	20 f4       	brcc	.+8      	; 0x12ca <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	a1 1d       	adc	r26, r1
    12c6:	b1 1d       	adc	r27, r1
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    12ca:	26 e8       	ldi	r18, 0x86	; 134
    12cc:	23 0f       	add	r18, r19
		m += 1;
    12ce:	02 96       	adiw	r24, 0x02	; 2
    12d0:	a1 1d       	adc	r26, r1
    12d2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    12d4:	20 93 98 02 	sts	0x0298, r18
	timer0_millis = m;
    12d8:	80 93 99 02 	sts	0x0299, r24
    12dc:	90 93 9a 02 	sts	0x029A, r25
    12e0:	a0 93 9b 02 	sts	0x029B, r26
    12e4:	b0 93 9c 02 	sts	0x029C, r27
	timer0_overflow_count++;
    12e8:	80 91 9d 02 	lds	r24, 0x029D
    12ec:	90 91 9e 02 	lds	r25, 0x029E
    12f0:	a0 91 9f 02 	lds	r26, 0x029F
    12f4:	b0 91 a0 02 	lds	r27, 0x02A0
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	a1 1d       	adc	r26, r1
    12fc:	b1 1d       	adc	r27, r1
    12fe:	80 93 9d 02 	sts	0x029D, r24
    1302:	90 93 9e 02 	sts	0x029E, r25
    1306:	a0 93 9f 02 	sts	0x029F, r26
    130a:	b0 93 a0 02 	sts	0x02A0, r27
}
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1324:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1326:	84 b5       	in	r24, 0x24	; 36
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    132c:	84 b5       	in	r24, 0x24	; 36
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1332:	85 b5       	in	r24, 0x25	; 37
    1334:	82 60       	ori	r24, 0x02	; 2
    1336:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1338:	85 b5       	in	r24, 0x25	; 37
    133a:	81 60       	ori	r24, 0x01	; 1
    133c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    133e:	ee e6       	ldi	r30, 0x6E	; 110
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1348:	e1 e8       	ldi	r30, 0x81	; 129
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    134e:	80 81       	ld	r24, Z
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    135a:	e0 e8       	ldi	r30, 0x80	; 128
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	81 60       	ori	r24, 0x01	; 1
    1362:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1364:	e1 eb       	ldi	r30, 0xB1	; 177
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	84 60       	ori	r24, 0x04	; 4
    136c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    136e:	e0 eb       	ldi	r30, 0xB0	; 176
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1378:	ea e7       	ldi	r30, 0x7A	; 122
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	84 60       	ori	r24, 0x04	; 4
    1380:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1382:	80 81       	ld	r24, Z
    1384:	82 60       	ori	r24, 0x02	; 2
    1386:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1388:	80 81       	ld	r24, Z
    138a:	81 60       	ori	r24, 0x01	; 1
    138c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1394:	10 92 c1 00 	sts	0x00C1, r1
    1398:	08 95       	ret

0000139a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	69 f0       	breq	.+26     	; 0x13b8 <turnOffPWM+0x1e>
    139e:	28 f4       	brcc	.+10     	; 0x13aa <turnOffPWM+0x10>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	b1 f0       	breq	.+44     	; 0x13d0 <turnOffPWM+0x36>
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	c1 f0       	breq	.+48     	; 0x13d8 <turnOffPWM+0x3e>
    13a8:	08 95       	ret
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	c9 f0       	breq	.+50     	; 0x13e0 <turnOffPWM+0x46>
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	e9 f0       	breq	.+58     	; 0x13ec <turnOffPWM+0x52>
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	01 f5       	brne	.+64     	; 0x13f6 <turnOffPWM+0x5c>
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13b8:	e0 e8       	ldi	r30, 0x80	; 128
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	80 83       	st	Z, r24
    13c2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13c4:	e0 e8       	ldi	r30, 0x80	; 128
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7d       	andi	r24, 0xDF	; 223
    13cc:	80 83       	st	Z, r24
    13ce:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13d0:	84 b5       	in	r24, 0x24	; 36
    13d2:	8f 77       	andi	r24, 0x7F	; 127
    13d4:	84 bd       	out	0x24, r24	; 36
    13d6:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13d8:	84 b5       	in	r24, 0x24	; 36
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	84 bd       	out	0x24, r24	; 36
    13de:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13e0:	e0 eb       	ldi	r30, 0xB0	; 176
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 77       	andi	r24, 0x7F	; 127
    13e8:	80 83       	st	Z, r24
    13ea:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13ec:	e0 eb       	ldi	r30, 0xB0	; 176
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7d       	andi	r24, 0xDF	; 223
    13f4:	80 83       	st	Z, r24
    13f6:	08 95       	ret

000013f8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	e3 58       	subi	r30, 0x83	; 131
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1406:	fc 01       	movw	r30, r24
    1408:	ef 56       	subi	r30, 0x6F	; 111
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    140e:	88 23       	and	r24, r24
    1410:	79 f1       	breq	.+94     	; 0x1470 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	fc 01       	movw	r30, r24
    141a:	e1 55       	subi	r30, 0x51	; 81
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	a5 91       	lpm	r26, Z+
    1420:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1422:	fc 01       	movw	r30, r24
    1424:	eb 55       	subi	r30, 0x5B	; 91
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	c5 91       	lpm	r28, Z+
    142a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    142c:	61 11       	cpse	r22, r1
    142e:	0c c0       	rjmp	.+24     	; 0x1448 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1430:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1432:	f8 94       	cli
		*reg &= ~bit;
    1434:	8c 91       	ld	r24, X
    1436:	e2 2f       	mov	r30, r18
    1438:	e0 95       	com	r30
    143a:	8e 23       	and	r24, r30
    143c:	8c 93       	st	X, r24
		*out &= ~bit;
    143e:	28 81       	ld	r18, Y
    1440:	e2 23       	and	r30, r18
    1442:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1444:	9f bf       	out	0x3f, r25	; 63
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    1448:	62 30       	cpi	r22, 0x02	; 2
    144a:	61 f4       	brne	.+24     	; 0x1464 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    144c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    144e:	f8 94       	cli
		*reg &= ~bit;
    1450:	3c 91       	ld	r19, X
    1452:	82 2f       	mov	r24, r18
    1454:	80 95       	com	r24
    1456:	83 23       	and	r24, r19
    1458:	8c 93       	st	X, r24
		*out |= bit;
    145a:	e8 81       	ld	r30, Y
    145c:	e2 2b       	or	r30, r18
    145e:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1460:	9f bf       	out	0x3f, r25	; 63
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1464:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1466:	f8 94       	cli
		*reg |= bit;
    1468:	ec 91       	ld	r30, X
    146a:	e2 2b       	or	r30, r18
    146c:	ec 93       	st	X, r30
		SREG = oldSREG;
    146e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	f9 01       	movw	r30, r18
    1482:	e7 59       	subi	r30, 0x97	; 151
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1488:	f9 01       	movw	r30, r18
    148a:	e3 58       	subi	r30, 0x83	; 131
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    1490:	f9 01       	movw	r30, r18
    1492:	ef 56       	subi	r30, 0x6F	; 111
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1498:	cc 23       	and	r28, r28
    149a:	d1 f0       	breq	.+52     	; 0x14d0 <digitalWrite+0x5a>
    149c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    149e:	81 11       	cpse	r24, r1
    14a0:	0e 94 cd 09 	call	0x139a	; 0x139a <turnOffPWM>

	out = portOutputRegister(port);
    14a4:	ec 2f       	mov	r30, r28
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	eb 55       	subi	r30, 0x5B	; 91
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	a5 91       	lpm	r26, Z+
    14b2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    14b4:	8f b7       	in	r24, 0x3f	; 63
	cli();
    14b6:	f8 94       	cli

	if (val == LOW) {
    14b8:	d1 11       	cpse	r29, r1
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <digitalWrite+0x52>
		*out &= ~bit;
    14bc:	9c 91       	ld	r25, X
    14be:	e1 2f       	mov	r30, r17
    14c0:	e0 95       	com	r30
    14c2:	e9 23       	and	r30, r25
    14c4:	ec 93       	st	X, r30
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <digitalWrite+0x58>
	} else {
		*out |= bit;
    14c8:	ec 91       	ld	r30, X
    14ca:	e1 2b       	or	r30, r17
    14cc:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    14ce:	8f bf       	out	0x3f, r24	; 63
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	08 95       	ret

000014d8 <_Z5task1Pv>:
void task1(void *p)
{
	
	while(1)
	{		
		OSTakeSema(&sema);
    14d8:	81 ea       	ldi	r24, 0xA1	; 161
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z10OSTakeSemaP2bs>
		if(flag)
    14e0:	80 91 09 01 	lds	r24, 0x0109
    14e4:	88 23       	and	r24, r24
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <_Z5task1Pv+0x1a>
			digitalWrite(LED2, HIGH);
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
    14f0:	f3 cf       	rjmp	.-26     	; 0x14d8 <_Z5task1Pv>
		else
			digitalWrite(LED2, LOW);
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	86 e0       	ldi	r24, 0x06	; 6
    14f6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
    14fa:	ee cf       	rjmp	.-36     	; 0x14d8 <_Z5task1Pv>

000014fc <_Z5task2Pv>:

void task2(void *p)
{
	while(1)
	{
		digitalWrite(LED1, HIGH);
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	89 e0       	ldi	r24, 0x09	; 9
    1500:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
		OSSleep(125);
    1504:	6d e7       	ldi	r22, 0x7D	; 125
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z7OSSleepm>
		digitalWrite(LED1, LOW);
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	89 e0       	ldi	r24, 0x09	; 9
    1514:	0e 94 3b 0a 	call	0x1476	; 0x1476 <digitalWrite>
		OSSleep(125);		
    1518:	6d e7       	ldi	r22, 0x7D	; 125
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z7OSSleepm>
		else
			digitalWrite(LED2, LOW);
	}
}

void task2(void *p)
    1524:	eb cf       	rjmp	.-42     	; 0x14fc <_Z5task2Pv>

00001526 <_Z7int0ISRv>:
	}
}

void int0ISR()
{
  flag=!flag;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 91 09 01 	lds	r25, 0x0109
    152c:	91 11       	cpse	r25, r1
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	80 93 09 01 	sts	0x0109, r24
  OSGiveSema(&sema);
    1534:	81 ea       	ldi	r24, 0xA1	; 161
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 a5 03 	call	0x74a	; 0x74a <_Z10OSGiveSemaP2bs>
    153c:	08 95       	ret

0000153e <setup>:

#define NUM_TASKS  2

void setup()
{
	OSInit(NUM_TASKS);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	0e 94 31 03 	call	0x662	; 0x662 <_Z6OSInith>
        attachInterrupt(0, int0ISR, RISING);
    1544:	43 e0       	ldi	r20, 0x03	; 3
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	63 e9       	ldi	r22, 0x93	; 147
    154a:	7a e0       	ldi	r23, 0x0A	; 10
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	0e 94 cb 08 	call	0x1196	; 0x1196 <attachInterrupt>
        
	pinMode(9, OUTPUT);
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	89 e0       	ldi	r24, 0x09	; 9
    1556:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
	pinMode(6, OUTPUT);
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <pinMode>
	
	// Create a binary semaphore with initial value 0
	OSCreateSema(&sema, 0, 1);		
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	81 ea       	ldi	r24, 0xA1	; 161
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z12OSCreateSemaP2bsjh>
	OSCreateTask(0, task1, NULL);
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	6c e6       	ldi	r22, 0x6C	; 108
    1576:	7a e0       	ldi	r23, 0x0A	; 10
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 b0 00 	call	0x160	; 0x160 <_Z12OSCreateTaskiPFvPvES_>
	OSCreateTask(1, task2, NULL);
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	6e e7       	ldi	r22, 0x7E	; 126
    1586:	7a e0       	ldi	r23, 0x0A	; 10
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 b0 00 	call	0x160	; 0x160 <_Z12OSCreateTaskiPFvPvES_>
	OSRun();
    1590:	0e 94 45 03 	call	0x68a	; 0x68a <_Z5OSRunv>
    1594:	08 95       	ret

00001596 <loop>:
}

void loop()
{
    1596:	08 95       	ret

00001598 <__udivmodhi4>:
    1598:	aa 1b       	sub	r26, r26
    159a:	bb 1b       	sub	r27, r27
    159c:	51 e1       	ldi	r21, 0x11	; 17
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <__udivmodhi4_ep>

000015a0 <__udivmodhi4_loop>:
    15a0:	aa 1f       	adc	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	a6 17       	cp	r26, r22
    15a6:	b7 07       	cpc	r27, r23
    15a8:	10 f0       	brcs	.+4      	; 0x15ae <__udivmodhi4_ep>
    15aa:	a6 1b       	sub	r26, r22
    15ac:	b7 0b       	sbc	r27, r23

000015ae <__udivmodhi4_ep>:
    15ae:	88 1f       	adc	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	5a 95       	dec	r21
    15b4:	a9 f7       	brne	.-22     	; 0x15a0 <__udivmodhi4_loop>
    15b6:	80 95       	com	r24
    15b8:	90 95       	com	r25
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	08 95       	ret

000015c0 <__divmodhi4>:
    15c0:	97 fb       	bst	r25, 7
    15c2:	07 2e       	mov	r0, r23
    15c4:	16 f4       	brtc	.+4      	; 0x15ca <__divmodhi4+0xa>
    15c6:	00 94       	com	r0
    15c8:	07 d0       	rcall	.+14     	; 0x15d8 <__divmodhi4_neg1>
    15ca:	77 fd       	sbrc	r23, 7
    15cc:	09 d0       	rcall	.+18     	; 0x15e0 <__divmodhi4_neg2>
    15ce:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodhi4>
    15d2:	07 fc       	sbrc	r0, 7
    15d4:	05 d0       	rcall	.+10     	; 0x15e0 <__divmodhi4_neg2>
    15d6:	3e f4       	brtc	.+14     	; 0x15e6 <__divmodhi4_exit>

000015d8 <__divmodhi4_neg1>:
    15d8:	90 95       	com	r25
    15da:	81 95       	neg	r24
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__divmodhi4_neg2>:
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255

000015e6 <__divmodhi4_exit>:
    15e6:	08 95       	ret

000015e8 <__udivmodsi4>:
    15e8:	a1 e2       	ldi	r26, 0x21	; 33
    15ea:	1a 2e       	mov	r1, r26
    15ec:	aa 1b       	sub	r26, r26
    15ee:	bb 1b       	sub	r27, r27
    15f0:	fd 01       	movw	r30, r26
    15f2:	0d c0       	rjmp	.+26     	; 0x160e <__udivmodsi4_ep>

000015f4 <__udivmodsi4_loop>:
    15f4:	aa 1f       	adc	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	ee 1f       	adc	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	a2 17       	cp	r26, r18
    15fe:	b3 07       	cpc	r27, r19
    1600:	e4 07       	cpc	r30, r20
    1602:	f5 07       	cpc	r31, r21
    1604:	20 f0       	brcs	.+8      	; 0x160e <__udivmodsi4_ep>
    1606:	a2 1b       	sub	r26, r18
    1608:	b3 0b       	sbc	r27, r19
    160a:	e4 0b       	sbc	r30, r20
    160c:	f5 0b       	sbc	r31, r21

0000160e <__udivmodsi4_ep>:
    160e:	66 1f       	adc	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	1a 94       	dec	r1
    1618:	69 f7       	brne	.-38     	; 0x15f4 <__udivmodsi4_loop>
    161a:	60 95       	com	r22
    161c:	70 95       	com	r23
    161e:	80 95       	com	r24
    1620:	90 95       	com	r25
    1622:	9b 01       	movw	r18, r22
    1624:	ac 01       	movw	r20, r24
    1626:	bd 01       	movw	r22, r26
    1628:	cf 01       	movw	r24, r30
    162a:	08 95       	ret

0000162c <__tablejump2__>:
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	05 90       	lpm	r0, Z+
    1632:	f4 91       	lpm	r31, Z
    1634:	e0 2d       	mov	r30, r0
    1636:	09 94       	ijmp

00001638 <calloc>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	86 9f       	mul	r24, r22
    1642:	80 01       	movw	r16, r0
    1644:	87 9f       	mul	r24, r23
    1646:	10 0d       	add	r17, r0
    1648:	96 9f       	mul	r25, r22
    164a:	10 0d       	add	r17, r0
    164c:	11 24       	eor	r1, r1
    164e:	c8 01       	movw	r24, r16
    1650:	0e 94 38 0b 	call	0x1670	; 0x1670 <malloc>
    1654:	ec 01       	movw	r28, r24
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	29 f0       	breq	.+10     	; 0x1664 <calloc+0x2c>
    165a:	a8 01       	movw	r20, r16
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	0e 94 65 0c 	call	0x18ca	; 0x18ca <memset>
    1664:	ce 01       	movw	r24, r28
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <malloc>:
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	91 05       	cpc	r25, r1
    1678:	10 f4       	brcc	.+4      	; 0x167e <malloc+0xe>
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	e0 91 b5 02 	lds	r30, 0x02B5
    1682:	f0 91 b6 02 	lds	r31, 0x02B6
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c0 e0       	ldi	r28, 0x00	; 0
    168c:	d0 e0       	ldi	r29, 0x00	; 0
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	11 f1       	breq	.+68     	; 0x16d6 <malloc+0x66>
    1692:	40 81       	ld	r20, Z
    1694:	51 81       	ldd	r21, Z+1	; 0x01
    1696:	48 17       	cp	r20, r24
    1698:	59 07       	cpc	r21, r25
    169a:	c0 f0       	brcs	.+48     	; 0x16cc <malloc+0x5c>
    169c:	48 17       	cp	r20, r24
    169e:	59 07       	cpc	r21, r25
    16a0:	61 f4       	brne	.+24     	; 0x16ba <malloc+0x4a>
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 97       	sbiw	r28, 0x00	; 0
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <malloc+0x40>
    16aa:	9b 83       	std	Y+3, r25	; 0x03
    16ac:	8a 83       	std	Y+2, r24	; 0x02
    16ae:	2b c0       	rjmp	.+86     	; 0x1706 <malloc+0x96>
    16b0:	90 93 b6 02 	sts	0x02B6, r25
    16b4:	80 93 b5 02 	sts	0x02B5, r24
    16b8:	26 c0       	rjmp	.+76     	; 0x1706 <malloc+0x96>
    16ba:	21 15       	cp	r18, r1
    16bc:	31 05       	cpc	r19, r1
    16be:	19 f0       	breq	.+6      	; 0x16c6 <malloc+0x56>
    16c0:	42 17       	cp	r20, r18
    16c2:	53 07       	cpc	r21, r19
    16c4:	18 f4       	brcc	.+6      	; 0x16cc <malloc+0x5c>
    16c6:	9a 01       	movw	r18, r20
    16c8:	be 01       	movw	r22, r28
    16ca:	df 01       	movw	r26, r30
    16cc:	ef 01       	movw	r28, r30
    16ce:	02 80       	ldd	r0, Z+2	; 0x02
    16d0:	f3 81       	ldd	r31, Z+3	; 0x03
    16d2:	e0 2d       	mov	r30, r0
    16d4:	dc cf       	rjmp	.-72     	; 0x168e <malloc+0x1e>
    16d6:	21 15       	cp	r18, r1
    16d8:	31 05       	cpc	r19, r1
    16da:	09 f1       	breq	.+66     	; 0x171e <malloc+0xae>
    16dc:	28 1b       	sub	r18, r24
    16de:	39 0b       	sbc	r19, r25
    16e0:	24 30       	cpi	r18, 0x04	; 4
    16e2:	31 05       	cpc	r19, r1
    16e4:	90 f4       	brcc	.+36     	; 0x170a <malloc+0x9a>
    16e6:	12 96       	adiw	r26, 0x02	; 2
    16e8:	8d 91       	ld	r24, X+
    16ea:	9c 91       	ld	r25, X
    16ec:	13 97       	sbiw	r26, 0x03	; 3
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	21 f0       	breq	.+8      	; 0x16fc <malloc+0x8c>
    16f4:	fb 01       	movw	r30, r22
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <malloc+0x94>
    16fc:	90 93 b6 02 	sts	0x02B6, r25
    1700:	80 93 b5 02 	sts	0x02B5, r24
    1704:	fd 01       	movw	r30, r26
    1706:	32 96       	adiw	r30, 0x02	; 2
    1708:	44 c0       	rjmp	.+136    	; 0x1792 <malloc+0x122>
    170a:	fd 01       	movw	r30, r26
    170c:	e2 0f       	add	r30, r18
    170e:	f3 1f       	adc	r31, r19
    1710:	81 93       	st	Z+, r24
    1712:	91 93       	st	Z+, r25
    1714:	22 50       	subi	r18, 0x02	; 2
    1716:	31 09       	sbc	r19, r1
    1718:	2d 93       	st	X+, r18
    171a:	3c 93       	st	X, r19
    171c:	3a c0       	rjmp	.+116    	; 0x1792 <malloc+0x122>
    171e:	20 91 b3 02 	lds	r18, 0x02B3
    1722:	30 91 b4 02 	lds	r19, 0x02B4
    1726:	23 2b       	or	r18, r19
    1728:	41 f4       	brne	.+16     	; 0x173a <malloc+0xca>
    172a:	20 91 02 01 	lds	r18, 0x0102
    172e:	30 91 03 01 	lds	r19, 0x0103
    1732:	30 93 b4 02 	sts	0x02B4, r19
    1736:	20 93 b3 02 	sts	0x02B3, r18
    173a:	20 91 00 01 	lds	r18, 0x0100
    173e:	30 91 01 01 	lds	r19, 0x0101
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	41 f4       	brne	.+16     	; 0x1758 <malloc+0xe8>
    1748:	2d b7       	in	r18, 0x3d	; 61
    174a:	3e b7       	in	r19, 0x3e	; 62
    174c:	40 91 04 01 	lds	r20, 0x0104
    1750:	50 91 05 01 	lds	r21, 0x0105
    1754:	24 1b       	sub	r18, r20
    1756:	35 0b       	sbc	r19, r21
    1758:	e0 91 b3 02 	lds	r30, 0x02B3
    175c:	f0 91 b4 02 	lds	r31, 0x02B4
    1760:	e2 17       	cp	r30, r18
    1762:	f3 07       	cpc	r31, r19
    1764:	a0 f4       	brcc	.+40     	; 0x178e <malloc+0x11e>
    1766:	2e 1b       	sub	r18, r30
    1768:	3f 0b       	sbc	r19, r31
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	78 f0       	brcs	.+30     	; 0x178e <malloc+0x11e>
    1770:	ac 01       	movw	r20, r24
    1772:	4e 5f       	subi	r20, 0xFE	; 254
    1774:	5f 4f       	sbci	r21, 0xFF	; 255
    1776:	24 17       	cp	r18, r20
    1778:	35 07       	cpc	r19, r21
    177a:	48 f0       	brcs	.+18     	; 0x178e <malloc+0x11e>
    177c:	4e 0f       	add	r20, r30
    177e:	5f 1f       	adc	r21, r31
    1780:	50 93 b4 02 	sts	0x02B4, r21
    1784:	40 93 b3 02 	sts	0x02B3, r20
    1788:	81 93       	st	Z+, r24
    178a:	91 93       	st	Z+, r25
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <malloc+0x122>
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	cf 01       	movw	r24, r30
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <free>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <free+0xe>
    17a6:	8c c0       	rjmp	.+280    	; 0x18c0 <free+0x126>
    17a8:	fc 01       	movw	r30, r24
    17aa:	32 97       	sbiw	r30, 0x02	; 2
    17ac:	13 82       	std	Z+3, r1	; 0x03
    17ae:	12 82       	std	Z+2, r1	; 0x02
    17b0:	00 91 b5 02 	lds	r16, 0x02B5
    17b4:	10 91 b6 02 	lds	r17, 0x02B6
    17b8:	01 15       	cp	r16, r1
    17ba:	11 05       	cpc	r17, r1
    17bc:	81 f4       	brne	.+32     	; 0x17de <free+0x44>
    17be:	20 81       	ld	r18, Z
    17c0:	31 81       	ldd	r19, Z+1	; 0x01
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	20 91 b3 02 	lds	r18, 0x02B3
    17ca:	30 91 b4 02 	lds	r19, 0x02B4
    17ce:	28 17       	cp	r18, r24
    17d0:	39 07       	cpc	r19, r25
    17d2:	79 f5       	brne	.+94     	; 0x1832 <free+0x98>
    17d4:	f0 93 b4 02 	sts	0x02B4, r31
    17d8:	e0 93 b3 02 	sts	0x02B3, r30
    17dc:	71 c0       	rjmp	.+226    	; 0x18c0 <free+0x126>
    17de:	d8 01       	movw	r26, r16
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	ae 17       	cp	r26, r30
    17e6:	bf 07       	cpc	r27, r31
    17e8:	50 f4       	brcc	.+20     	; 0x17fe <free+0x64>
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	2d 91       	ld	r18, X+
    17ee:	3c 91       	ld	r19, X
    17f0:	13 97       	sbiw	r26, 0x03	; 3
    17f2:	ad 01       	movw	r20, r26
    17f4:	21 15       	cp	r18, r1
    17f6:	31 05       	cpc	r19, r1
    17f8:	09 f1       	breq	.+66     	; 0x183c <free+0xa2>
    17fa:	d9 01       	movw	r26, r18
    17fc:	f3 cf       	rjmp	.-26     	; 0x17e4 <free+0x4a>
    17fe:	9d 01       	movw	r18, r26
    1800:	da 01       	movw	r26, r20
    1802:	33 83       	std	Z+3, r19	; 0x03
    1804:	22 83       	std	Z+2, r18	; 0x02
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	86 0f       	add	r24, r22
    180c:	97 1f       	adc	r25, r23
    180e:	82 17       	cp	r24, r18
    1810:	93 07       	cpc	r25, r19
    1812:	69 f4       	brne	.+26     	; 0x182e <free+0x94>
    1814:	ec 01       	movw	r28, r24
    1816:	28 81       	ld	r18, Y
    1818:	39 81       	ldd	r19, Y+1	; 0x01
    181a:	26 0f       	add	r18, r22
    181c:	37 1f       	adc	r19, r23
    181e:	2e 5f       	subi	r18, 0xFE	; 254
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	93 83       	std	Z+3, r25	; 0x03
    182c:	82 83       	std	Z+2, r24	; 0x02
    182e:	45 2b       	or	r20, r21
    1830:	29 f4       	brne	.+10     	; 0x183c <free+0xa2>
    1832:	f0 93 b6 02 	sts	0x02B6, r31
    1836:	e0 93 b5 02 	sts	0x02B5, r30
    183a:	42 c0       	rjmp	.+132    	; 0x18c0 <free+0x126>
    183c:	13 96       	adiw	r26, 0x03	; 3
    183e:	fc 93       	st	X, r31
    1840:	ee 93       	st	-X, r30
    1842:	12 97       	sbiw	r26, 0x02	; 2
    1844:	ed 01       	movw	r28, r26
    1846:	49 91       	ld	r20, Y+
    1848:	59 91       	ld	r21, Y+
    184a:	9e 01       	movw	r18, r28
    184c:	24 0f       	add	r18, r20
    184e:	35 1f       	adc	r19, r21
    1850:	e2 17       	cp	r30, r18
    1852:	f3 07       	cpc	r31, r19
    1854:	71 f4       	brne	.+28     	; 0x1872 <free+0xd8>
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	84 0f       	add	r24, r20
    185c:	95 1f       	adc	r25, r21
    185e:	02 96       	adiw	r24, 0x02	; 2
    1860:	11 96       	adiw	r26, 0x01	; 1
    1862:	9c 93       	st	X, r25
    1864:	8e 93       	st	-X, r24
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	13 96       	adiw	r26, 0x03	; 3
    186c:	9c 93       	st	X, r25
    186e:	8e 93       	st	-X, r24
    1870:	12 97       	sbiw	r26, 0x02	; 2
    1872:	e0 e0       	ldi	r30, 0x00	; 0
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	d8 01       	movw	r26, r16
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	8d 91       	ld	r24, X+
    187c:	9c 91       	ld	r25, X
    187e:	13 97       	sbiw	r26, 0x03	; 3
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	19 f0       	breq	.+6      	; 0x188a <free+0xf0>
    1884:	f8 01       	movw	r30, r16
    1886:	8c 01       	movw	r16, r24
    1888:	f6 cf       	rjmp	.-20     	; 0x1876 <free+0xdc>
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	98 01       	movw	r18, r16
    1890:	2e 5f       	subi	r18, 0xFE	; 254
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	82 0f       	add	r24, r18
    1896:	93 1f       	adc	r25, r19
    1898:	20 91 b3 02 	lds	r18, 0x02B3
    189c:	30 91 b4 02 	lds	r19, 0x02B4
    18a0:	28 17       	cp	r18, r24
    18a2:	39 07       	cpc	r19, r25
    18a4:	69 f4       	brne	.+26     	; 0x18c0 <free+0x126>
    18a6:	30 97       	sbiw	r30, 0x00	; 0
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <free+0x11a>
    18aa:	10 92 b6 02 	sts	0x02B6, r1
    18ae:	10 92 b5 02 	sts	0x02B5, r1
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <free+0x11e>
    18b4:	13 82       	std	Z+3, r1	; 0x03
    18b6:	12 82       	std	Z+2, r1	; 0x02
    18b8:	10 93 b4 02 	sts	0x02B4, r17
    18bc:	00 93 b3 02 	sts	0x02B3, r16
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	08 95       	ret

000018ca <memset>:
    18ca:	dc 01       	movw	r26, r24
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <memset+0x6>
    18ce:	6d 93       	st	X+, r22
    18d0:	41 50       	subi	r20, 0x01	; 1
    18d2:	50 40       	sbci	r21, 0x00	; 0
    18d4:	e0 f7       	brcc	.-8      	; 0x18ce <memset+0x4>
    18d6:	08 95       	ret

000018d8 <_exit>:
    18d8:	f8 94       	cli

000018da <__stop_program>:
    18da:	ff cf       	rjmp	.-2      	; 0x18da <__stop_program>
